{"version":3,"file":"chunk-59303698.js","sources":["../node_modules/can-diff/map/map.js"],"sourcesContent":["'use strict';\n\nvar canReflect = require('can-reflect');\n\nfunction defaultIdentity(a, b){\n\treturn a === b;\n}\n\n\n/**\n * @module {function} can-diff/map/map\n * @parent can-diff\n *\n * @description Return a difference of two maps or objects.\n *\n * @signature `diffMap(oldObject, newObject)`\n *\n * Find the differences between two objects, based on properties and values.\n *\n * ```js\n * var diffObject = require(\"can-diff/map/map\");\n *\n * diffMap({a: 1, b: 2}, {b: 3, c: 4})) // ->\n *   [{key: \"a\", type: \"remove\"},\n *    {key: \"b\", type: \"set\": value: 3},\n *    {key: \"c\", type: \"add\", \"value\": 4}]\n * ```\n *\n * @param {Object} oldObject The object to diff from.\n * @param {Object} newObject The object to diff to.\n * @return {Array} An array of object-[can-symbol/types/Patch patch] objects\n *\n * The object-patch object format has the following keys:\n * - **type**:  the type of operation on this property: add, remove, or set\n * - **key**:   the mutated property on the new object\n * - **value**: the new value (if type is \"add\" or \"set\")\n *\n */\nmodule.exports = function(oldObject, newObject){\n\tvar oldObjectClone,\n\t\tpatches = [];\n\n\t// clone oldObject so properties can be deleted\n\toldObjectClone = canReflect.assignMap({}, oldObject);\n\n    canReflect.eachKey(newObject, function(value, newProp){\n        // look for added properties\n        if (!oldObject || !oldObject.hasOwnProperty(newProp)) {\n            patches.push({\n                key: newProp,\n                type: 'add',\n                value: value\n            });\n        // look for changed properties\n        } else if (newObject[newProp] !== oldObject[newProp]) {\n            patches.push({\n                key: newProp,\n                type: 'set',\n                value: value\n            });\n        }\n\n        // delete properties found in newObject\n        // so we can find removed properties\n        delete oldObjectClone[newProp];\n    });\n\n\t// loop over removed properties\n\tfor (var oldProp in oldObjectClone) {\n\t\tpatches.push({\n\t\t\tkey: oldProp,\n\t\t\ttype: 'delete'\n\t\t});\n\t}\n\n\treturn patches;\n};\n"],"names":["oldObject","newObject","oldObjectClone","patches","oldProp","canReflect","assignMap","eachKey","value","newProp","hasOwnProperty","push","key","type"],"mappings":"6EAsCA,QAAiB,SAASA,EAAWC,GACpC,IAAIC,EACHC,EAAU,GA4BX,IAAK,IAAIC,KAzBTF,EAAiBG,WAAWC,UAAU,GAAIN,GAEvCK,WAAWE,QAAQN,EAAW,SAASO,EAAOC,GAErCT,GAAcA,EAAUU,eAAeD,GAOjCR,EAAUQ,KAAaT,EAAUS,IACxCN,EAAQQ,KAAK,CACTC,IAAKH,EACLI,KAAM,MACNL,MAAOA,IAVXL,EAAQQ,KAAK,CACTC,IAAKH,EACLI,KAAM,MACNL,MAAOA,WAaRN,EAAeO,KAITP,EACnBC,EAAQQ,KAAK,CACZC,IAAKR,EACLS,KAAM,WAIR,OAAOV"}