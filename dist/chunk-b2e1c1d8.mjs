import"./chunk-5f1245ff.mjs";import{a as canSymbol}from"./chunk-b37d91a1.mjs";import"./chunk-2c9f11a8.mjs";import"./chunk-862b179d.mjs";import{a as canReflect}from"./chunk-7e0220de.mjs";import{a as KeyTree}from"./chunk-8d049599.mjs";import{a as queues}from"./chunk-12ed728f.mjs";var metaSymbol=canSymbol.for("can.meta");function addHandlers(e,n){n.lifecycleHandlers||(n.lifecycleHandlers=new KeyTree([Object,Array])),n.instancePatchesHandlers||(n.instancePatchesHandlers=new KeyTree([Object,Array]))}function ensureMeta(e){var n=e[metaSymbol];return n||(n={},canReflect.setKeyValue(e,metaSymbol,n)),addHandlers(e,n),n}var props={};function onOffAndDispatch(e,n,a){props["can.on"+e]=function(e,n){ensureMeta(this)[a].add([n||"mutate",e])},props["can.off"+e]=function(e,n){ensureMeta(this)[a].delete([n||"mutate",e])},props["can."+n]=function(e,n){queues.enqueueByQueue(ensureMeta(this)[a].getNode([]),this,[e,n])}}function mixinTypeBindings(e){return canReflect.assignSymbols(e,props)}onOffAndDispatch("InstancePatches","dispatchInstanceOnPatches","instancePatchesHandlers"),onOffAndDispatch("InstanceBoundChange","dispatchInstanceBoundChange","lifecycleHandlers"),Object.defineProperty(mixinTypeBindings,"addHandlers",{enumerable:!1,value:addHandlers});var type=mixinTypeBindings;export{type as a};
//# sourceMappingURL=chunk-b2e1c1d8.js.map
