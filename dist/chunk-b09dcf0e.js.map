{"version":3,"file":"chunk-b09dcf0e.js","sources":["../node_modules/can-key/utils.js","../node_modules/can-key/get/get.js"],"sourcesContent":["\"use strict\";\nvar utils = {\n    isContainer: function (current) {\n        var type = typeof current;\n        return current && (type === \"object\" || type === \"function\");\n    },\n    strReplacer: /\\{([^\\}]+)\\}/g,\n\n    parts: function(name) {\n        if(Array.isArray(name)) {\n            return name;\n        } else {\n            return typeof name !== 'undefined' ? (name + '').replace(/\\[/g,'.')\n            \t\t.replace(/]/g,'').split('.') : [];\n        }\n    }\n};\n\nmodule.exports= utils;\n","'use strict';\nvar canReflect = require(\"can-reflect\");\nvar utils = require(\"../utils\");\n\n/**\n * @module {function} can-key/get/get\n * @parent can-key\n * @description Get properties on deep/nested objects of different types: Object, Map, [can-reflect] types, etc.\n *\n * @signature `get(obj, path)`\n * @param  {Object} obj the object to use as the root for property-based navigation\n * @param  {String} path a String of dot-separated keys, representing a path of properties\n * @return {*}       the value at the property path\n *\n * @body\n *\n * A *path* is a dot-delimited sequence of zero or more property names, such that \"foo.bar\" means \"the property\n * 'bar' of the object at the property 'foo' of the root.\"  An empty path returns the object passed.\n *\n * ```js\n * var get = require(\"can-key\");\n * console.log(get({a: {b: {c: \"foo\"}}}, \"a.b.c\")); // -> \"foo\"\n * console.log(get({a: {}}, \"a.b.c\")); // -> undefined\n * console.log(get([{a: {}}, {a: {b: \"bar\"}}], \"a.b\")); // -> \"bar\"\n *\n * var map = new Map();\n * map.set(\"first\", {second: \"third\"});\n *\n * get(map, \"first.second\") //-> \"third\"\n * ```\n */\nfunction get(obj, name) {\n    // The parts of the name we are looking up\n    // `['App','Models','Recipe']`\n    var parts = utils.parts(name);\n\n    var length = parts.length,\n        current, i, container;\n\n    if (!length) {\n        return obj;\n    }\n\n    current = obj;\n\n    // Walk current to the 2nd to last object or until there\n    // is not a container.\n    for (i = 0; i < length && utils.isContainer(current) && current !== null; i++) {\n        container = current;\n        current = canReflect.getKeyValue( container, parts[i] );\n    }\n\n    return current;\n}\n\nmodule.exports = get;\n"],"names":["utils","isContainer","current","type","strReplacer","parts","name","Array","isArray","replace","split","get","obj","i","container","length","canReflect","getKeyValue"],"mappings":"6EACA,YAAIA,MAAQ,CACRC,YAAa,SAAUC,GACnB,IAAIC,SAAcD,EAClB,OAAOA,IAAqB,WAATC,GAA8B,aAATA,IAE5CC,YAAa,gBAEbC,MAAO,SAASC,GACZ,OAAGC,MAAMC,QAAQF,GACNA,OAEgB,IAATA,GAAwBA,EAAO,IAAIG,QAAQ,MAAM,KAC5DA,QAAQ,KAAK,IAAIC,MAAM,KAAO,KCkB7C,SAASC,IAAIC,EAAKN,GAGd,IAGIJ,EAASW,EAAGC,EAHZT,EAAQL,QAAMK,MAAMC,GAEpBS,EAASV,EAAMU,OAGnB,IAAKA,EACD,OAAOH,EAOX,IAJAV,EAAUU,EAILC,EAAI,EAAGA,EAAIE,GAAUf,QAAMC,YAAYC,IAAwB,OAAZA,EAAkBW,IACtEC,EAAYZ,EACZA,EAAUc,WAAWC,YAAaH,EAAWT,EAAMQ,IAGvD,OAAOX,EAGX,UAAiBS,sBDrCDX"}