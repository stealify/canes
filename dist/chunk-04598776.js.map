{"version":3,"file":"chunk-04598776.js","sources":["../node_modules/can-string/can-string.js"],"sourcesContent":["'use strict';\n// ##string.js\n// _Miscellaneous string utility functions._\n// Several of the methods in this plugin use code adapted from Prototype\n// Prototype JavaScript framework, version 1.6.0.1.\n// Â© 2005-2007 Sam Stephenson\nvar strUndHash = /_|-/,\n\tstrColons = /\\=\\=/,\n\tstrWords = /([A-Z]+)([A-Z][a-z])/g,\n\tstrLowUp = /([a-z\\d])([A-Z])/g,\n\tstrDash = /([a-z\\d])([A-Z])/g,\n\tstrQuote = /\"/g,\n\tstrSingleQuote = /'/g,\n\tstrHyphenMatch = /-+(.)?/g,\n\tstrCamelMatch = /[a-z][A-Z]/g,\n\tconvertBadValues = function (content) {\n\t\t// Convert bad values into empty strings\n\t\tvar isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';\n\t\treturn '' + (isInvalid ? '' : content);\n\t};\n\nvar string = {\n\t/**\n\t * @function can-string.esc esc\n\t * @signature `string.esc(content)`\n\t * @param  {String} content a string\n\t * @return {String}         the string safely HTML-escaped\n\t *\n\t * ```js\n\t * var string = require(\"can-string\");\n\t *\n\t * string.esc(\"<div>&nbsp;</div>\"); //-> \"&lt;div&gt;&amp;nbsp;&lt;/div&gt;\"\n\t * ```\n\t */\n\tesc: function (content) {\n\t\treturn convertBadValues(content)\n\t\t\t.replace(/&/g, '&amp;')\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/>/g, '&gt;')\n\t\t\t.replace(strQuote, '&#34;')\n\t\t\t.replace(strSingleQuote, '&#39;');\n\t},\n\t/**\n\t * @function can-string.capitalize capitalize\n\t * @signature `string.capitalize(s)`\n\t * @param  {String} s     the string to capitalize\n\t * @return {String}       the supplied string with the first character uppercased if it is a letter\n\t *\n\t * ```js\n\t * var string = require(\"can-string\");\n\t *\n\t * console.log(string.capitalize(\"foo\")); // -> \"Foo\"\n\t * console.log(string.capitalize(\"123\")); // -> \"123\"\n\t * ```\n\t */\n\tcapitalize: function (s) {\n\t\t// Used to make newId.\n\t\treturn s.charAt(0)\n\t\t\t.toUpperCase() + s.slice(1);\n\t},\n\t/**\n\t * @function can-string.camelize camelize\n\t * @signature `string.camelize(s)`\n\t * @param  {String} str   the string to camelCase\n\t * @return {String}       the supplied string with hyphens removed and following letters capitalized.\n\t *\n\t * ```js\n\t * var string = require(\"can-string\");\n\t *\n\t * console.log(string.camelize(\"foo-bar\")); // -> \"fooBar\"\n\t * console.log(string.camelize(\"-webkit-flex-flow\")); // -> \"WebkitFlexFlow\"\n\t * ```\n\t */\n\tcamelize: function (str) {\n\t\treturn convertBadValues(str)\n\t\t\t.replace(strHyphenMatch, function (match, chr) {\n\t\t\t\treturn chr ? chr.toUpperCase() : '';\n\t\t\t});\n\t},\n\t/**\n\t * @function can-string.hyphenate hyphenate\n\t * @signature `string.hyphenate(s)`\n\t * @param  {String} str   a string in camelCase\n\t * @return {String}       the supplied string with camelCase converted to hyphen-lowercase digraphs\n\t *\n\t * ```js\n\t * var string = require(\"can-string\");\n\t *\n\t * console.log(string.hyphenate(\"fooBar\")); // -> \"foo-bar\"\n\t * console.log(string.hyphenate(\"WebkitFlexFlow\")); // -> \"Webkit-flex-flow\"\n\t * ```\n\t */\n\thyphenate: function (str) {\n\t\treturn convertBadValues(str)\n\t\t\t.replace(strCamelMatch, function (str) {\n\t\t\t\treturn str.charAt(0) + '-' + str.charAt(1)\n\t\t\t\t\t.toLowerCase();\n\t\t\t});\n\t},\n\t/**\n\t * @function can-string.underscore underscore\n\t * @signature `string.underscore(s)`\n\t * @param  {String} str   a string in camelCase\n\t * @return {String}       the supplied string with camelCase converted to underscore-lowercase digraphs\n\t *\n\t * ```js\n\t * var string = require(\"can-string\");\n\t *\n\t * console.log(string.underscore(\"fooBar\")); // -> \"foo_bar\"\n\t * console.log(string.underscore(\"HTMLElement\")); // -> \"html_element\"\n\t * ```\n\t */\n\tunderscore: function (s) {\n\t\treturn s.replace(strColons, '/')\n\t\t\t.replace(strWords, '$1_$2')\n\t\t\t.replace(strLowUp, '$1_$2')\n\t\t\t.replace(strDash, '_')\n\t\t\t.toLowerCase();\n\t},\n\t/**\n\t * @property {RegExp} can-string.strUndHash strUndHash\n\t *\n\t * A regex which matches an underscore or hyphen character\n\t */\n\tundHash: strUndHash\n};\nmodule.exports = string;\n"],"names":["strUndHash","strColons","strWords","strLowUp","strDash","strQuote","strSingleQuote","strHyphenMatch","strCamelMatch","convertBadValues","content","isNaN","string","esc","replace","capitalize","s","charAt","toUpperCase","slice","camelize","str","match","chr","hyphenate","toLowerCase","underscore","undHash"],"mappings":"AAMA,cAAIA,WAAa,MAChBC,UAAY,OACZC,SAAW,wBACXC,SAAW,oBACXC,QAAU,oBACVC,SAAW,KACXC,eAAiB,KACjBC,eAAiB,UACjBC,cAAgB,cAChBC,iBAAmB,SAAUC,GAG5B,MAAO,IADSA,MAAAA,GAA6CC,MAAMD,IAAY,GAAKA,GAAY,MACvE,GAAKA,IAG5BE,OAAS,CAaZC,IAAK,SAAUH,GACd,OAAOD,iBAAiBC,GACtBI,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQT,SAAU,SAClBS,QAAQR,eAAgB,UAe3BS,WAAY,SAAUC,GAErB,OAAOA,EAAEC,OAAO,GACdC,cAAgBF,EAAEG,MAAM,IAe3BC,SAAU,SAAUC,GACnB,OAAOZ,iBAAiBY,GACtBP,QAAQP,eAAgB,SAAUe,EAAOC,GACzC,OAAOA,EAAMA,EAAIL,cAAgB,MAgBpCM,UAAW,SAAUH,GACpB,OAAOZ,iBAAiBY,GACtBP,QAAQN,cAAe,SAAUa,GACjC,OAAOA,EAAIJ,OAAO,GAAK,IAAMI,EAAIJ,OAAO,GACtCQ,iBAgBLC,WAAY,SAAUV,GACrB,OAAOA,EAAEF,QAAQb,UAAW,KAC1Ba,QAAQZ,SAAU,SAClBY,QAAQX,SAAU,SAClBW,QAAQV,QAAS,KACjBqB,eAOHE,QAAS3B,mBAEOY,YAAAA"}