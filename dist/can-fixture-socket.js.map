{"version":3,"file":"can-fixture-socket.js","sources":["../node_modules/can-fixture-socket/src/store.js","../node_modules/can-fixture-socket/src/feathers-client.js","../node_modules/can-fixture-socket/src/index.js","../node_modules/can-fixture-socket/can-fixture-socket.js"],"sourcesContent":["var extractResponse = require('can-fixture/core').extractResponse;\n\n/**\n * @function can-fixture-socket.requestHandlerToListener requestHandlerToListener\n * @parent can-fixture-socket.properties\n * \n * Transforms XHR request handler into socket event listener.\n * \n * @signature `requestHandlerToListener( reqHandler )`\n *\n * Transforms request handler that expects two arguments `request` and `response` into socket event listener.\n * \n * ```js\n * server.on(\"news find\", requestHandlerToListener( fixtureStore.getListData ));\n * ```\n *     \n * @param {Function} reqHandler A request handler, e.g. [can-fixture/StoreType.prototype.getListData].\n * @returns {can-fixture-store.socket-event-listener}\n * \n * @body\n * \n * ## Use\n *\n * Fixture [can-fixture.store] methods expect two arguments `req` and `res` and work like this:\n *   - grab query from `req.data`;\n *   - on error call `res( 403, err )`;\n *   - on success call `res( data )`.\n *   \n * The format of the returned data is:\n *   - for [can-fixture/StoreType.prototype.getDataList]: {count: <number>, limit: <number>, offset: <number> , data: [{...},{...}, ...]}\n *   - for [can-fixture/StoreType.prototype.getData]: the item object.\n * \n * We can use the helper to transform fixture store methods into event listeners:\n * ```js\n * var fixture = require(\"can-fixture\");\n * var canSet = require(\"can-set\");\n * var io = require(\"socket.io-client\");\n * var fixtureSocket = require(\"can-fixture-socket\");\n * \n * // Create fixture store:\n * var fixtureStore = fixture.store([\n *   {id: 1, title: 'One'},\n *   {id: 2, title: 'Two'},\n *   {id: 3, title: 'Three'}\n * ], new canSet.Algebra({}));\n * \n * var mockedServer = new fixtureSocket.Server(io);\n * mockedServer.on(\"books find\", fixtureStore.requestHandlerToListener( fixtureStore.getListData ));\n * ```\n */\nfunction requestHandlerToListener(method){\n\treturn function(query, fn){\n\t\tvar req = {data: query};\n\t\tvar res = function(){\n\t\t\tvar response = extractResponse.apply(null, arguments);\n\t\t\tif (response[0] === 200){\n\t\t\t\tfn(null, response[1]);\n\t\t\t} else {\n\t\t\t\tfn(response[1]);\n\t\t\t}\n\t\t};\n\t\tmethod(req, res);\n\t}\n}\n\n/**\n * @function can-fixture-socket.storeToListeners storeToListeners\n * @parent can-fixture-socket.properties\n * \n * Returns a set of listeners transformed from fixture store request handlers. Useful for working with REST-ful resources.\n * \n * @signature `storeToListeners( fixtureStore )`\n * \n * Wraps methods of fixture.store to make them socket event listener.\n * \n * ```js\n * var listeners = storeToListeners( fixtureStore );\n * \n * server.on({\n *   \"news find\": listeners.getListData,\n *   \"news get\": listeners.getData,\n * })\n * ```\n * \n * @param fixtureStore\n * @returns {*}\n * \n * @body\n * \n * ## Use\n * \n * Fixture [can-fixture.store] provides REST-ful resource storage. Its designed to work with XHR requests thus its methods expect two arguments `request` and `response`. To work with socket events we need to transform request handlers into socket event listeners.\n * \n * Here is how we can do this:\n * \n * ```js\n * var fixture = require(\"can-fixture\");\n * var canSet = require(\"can-set\");\n * var io = require(\"socket.io-client\");\n * var fixtureSocket = require(\"can-fixture-socket\");\n *\n * // Create fixture store:\n * var fixtureStore = fixture.store([\n *   {id: 1, title: 'One'},\n *   {id: 2, title: 'Two'},\n *   {id: 3, title: 'Three'}\n * ], new canSet.Algebra({}));\n * \n * // Instantiate mocked socket server:\n * var mockedServer = new fixtureSocket.Server(io);\n * \n * // Now use fixture store to emulate REST-ful service:\n * var toListener = fixtureStore.requestHandlerToListener;\n * mockedServer.on({\n *   \"books find\":   toListener( fixtureStore.getListData ),\n *   \"books get\":    toListener( fixtureStore.getData ),\n *   \"books create\": toListener( fixtureStore.createData ),\n *   \"books update\": toListener( fixtureStore.updateData ),\n *   \"books delete\": toListener( fixtureStore.destroyData )\n * });\n * ```\n */\nfunction storeToListeners(fixtureStore){\n\tvar methods = ['getListData', 'getData', 'updateData', 'createData', 'destroyData'];\n\treturn methods.reduce(function(listeners, method){\n\t\tlisteners[method] = requestHandlerToListener(fixtureStore[method]);\n\t\treturn listeners;\n\t}, {});\n}\n\nmodule.exports = {\n\trequestHandlerToListener: requestHandlerToListener,\n\tstoreToListeners: storeToListeners\n};\n","/*\n * FEATHERS protocol.\n * Feathers service api (REST provider): https://docs.feathersjs.com/rest/readme.html\n * \n * \n * - Common Error Response Packet:\n * REQ: 422[\"messages::get\",111,{}]\n * RES: 432[{\"stack\":\"NotFound: No record found for id '111' ...\",\"message\":\"No record found for id '111'\",\"type\":\"FeathersError\",\"name\":\"NotFound\",\"code\":404,\"className\":\"not-found\",\"errors\":{}}]\n * \n * \n * - socket.emit('messages::find', {}, function(error, data){});\n * REQ: 421[\"messages::find\",{\"$sort\":{\"createdAt\":-1},\"$limit\":10}]\n * RES: 434[null,{\"total\":10,\"limit\":5,\"skip\":0,\"data\":[]}]\n * \n * \n * - socket.emit('messages::get', 'uOybkd5RVe5wKoxy', {}, function(error, data){});\n * REQ: 422[\"messages::get\",\"uOybkd5RVe5wKoxy\",{}]\n * RES: 432[null,{\"text\":\"Hello from cmd!\",\"createdAt\":1475294332699,\"_id\":\"uOybkd5RVe5wKoxy\"}]\n * \n * \n * - socket.emit('messages::create', {text: 'New message'}, {}, function(error, data){});\n * REQ: 422[\"messages::create\",{\"text\":\"new message\"},{}]\n * RES: 432[null,{\"text\":\"new message\",\"userId\":\"Ke8I0Kmn0lCyrEaq\",\"createdAt\":1476722319537,\"_id\":\"ttnWkW4YhGRc1CDM\",\"sentBy\":{\"email\":\"fadeev.ilya@gmail.com\",\"password\":\"$2a$10$QqI4Uamr/mTH8P/.W0TNTuofjRuNDZLuyNaQzl3vHXhpzrWBwCo7q\",\"avatar\":\"https://s.gravatar.com/avatar/44751bab986933e4405394fb32d6b91d?s=60\",\"_id\":\"Ke8I0Kmn0lCyrEaq\"}}]\n * EXT: 42[\"messages created\",{\"text\":\"new message\",\"userId\":\"Ke8I0Kmn0lCyrEaq\",\"createdAt\":1476722319537,\"_id\":\"ttnWkW4YhGRc1CDM\",\"sentBy\":{\"email\":\"fadeev.ilya@gmail.com\",\"password\":\"$2a$10$QqI4Uamr/mTH8P/.W0TNTuofjRuNDZLuyNaQzl3vHXhpzrWBwCo7q\",\"avatar\":\"https://s.gravatar.com/avatar/44751bab986933e4405394fb32d6b91d?s=60\",\"_id\":\"Ke8I0Kmn0lCyrEaq\"}}]\n * \n * \n * - socket.emit('messages::remove', 'yDLARueVwSF0S6v8', {}, function(error, data){});\n * REQ: 422[\"messages::remove\",\"yDLARueVwSF0S6v8\",{}]\n * RES: 432[null,{\"text\":\"helllllo\",\"userId\":\"Ke8I0Kmn0lCyrEaq\",\"createdAt\":1476722461622,\"_id\":\"yDLARueVwSF0S6v8\"}]\n * EXT: 42[\"messages removed\",{\"text\":\"helllllo\",\"userId\":\"Ke8I0Kmn0lCyrEaq\",\"createdAt\":1476722461622,\"_id\":\"yDLARueVwSF0S6v8\"}]\n * \n * \n * - socket.emit('messages::update', 'ttnWkW4YhGRc1CDM', {}, function(error, data){});\n * REQ: 422[\"messages::update\",\"ttnWkW4YhGRc1CDM\",{\"text\":\"Updated text!\"},{}]\n * RES: 432[null,{\"text\":\"Updated text!\",\"_id\":\"ttnWkW4YhGRc1CDM\"}]\n * EXT: 42 [\"messages updated\",{\"text\":\"Updated text!\",\"_id\":\"ttnWkW4YhGRc1CDM\"}]\n * \n */\n\nvar storeToListeners = require('./store').storeToListeners;\nvar assign = require('can-assign');\n\n/**\n * Subscribes to mocked socket server events for FeathersJS service.\n * Transforms ((query, fn))\n * @param serviceName\n * @param fixtureStore\n * @param mockServer\n * @param options\n * @returns {*}\n * @hide\n *\n * fixture.store data:\n * \t\tgetListData: {}\n */\nfunction subscribeFeathersStoreToServer(serviceName, fixtureStore, mockServer, options){\n\tvar listeners = storeToListeners(fixtureStore);\n\tmockServer.on(serviceName + '::find', toFeathersDataHandler(listeners.getListData, null, toFeathersFind));\n\tmockServer.on(serviceName + '::get', toFeathersDataHandler(listeners.getData, wrapToId(options), null));\n\t\n\t// fixture.store.destroyData returns back the passed set, e.g. {id: 1}\n\t// https://github.com/canjs/can-connect/blob/master/data/memory-cache/memory-cache.js#L416\n\t// Feathers.remove returns back the whole object.\n\tmockServer.on(serviceName + '::remove', toFeathersRemoveHandler(listeners.getData, listeners.destroyData, options));\n\t\n\tmockServer.on(serviceName + '::create', toFeathersCreateHandler(listeners.createData));\n\tmockServer.on(serviceName + '::update', toFeathersUpdateHandler(listeners.updateData, options));\n}\n\nfunction toFeathersDataHandler(method, queryTransformer, dataTransformer){\n\treturn function(query){\n\t\tvar args = Array.prototype.slice.call(arguments),\n\t\t\tfn;\n\t\tif (typeof args[args.length-1] === 'function'){\n\t\t\tfn = args[args.length-1];\n\t\t}\n\t\tquery = queryTransformer ? queryTransformer(query) : query;\n\t\tmethod(query, function(err, data){\n\t\t\tif (err){\n\t\t\t\tfn && fn(err);\n\t\t\t} else {\n\t\t\t\tdata = dataTransformer ? dataTransformer(data) : data;\n\t\t\t\tfn && fn(null, data);\n\t\t\t}\n\t\t})\n\t}\n}\n/**\n * Wraps given id into an object with property name `id` (or options.id).\n * @param options\n * @returns {Function}\n * @hide\n */\nfunction wrapToId(options){\n\treturn function(id){\n\t\tvar o = {},\n\t\t\tidProp = options && options.id || 'id';\n\t\to[idProp] = id;\n\t\treturn o;\n\t}\n}\n\n/**\n * Transforms getListData from fixture to feathers format.\n *   - fixture.store.getListData: {count, limit, offset, data}\n *   - feathers.find:             {total, limit, skip, data}\n * @param data\n * @returns {{total: number, limit: number, skip: number, data: *}}\n */\n// fixture.store.getListData: {count, limit, offset, data}\n// feathers.find:             {total, limit, skip, data}\nfunction toFeathersFind(data){\n\treturn {\n\t\ttotal: data.count,\n\t\tlimit: data.limit,\n\t\tskip: data.offset,\n\t\tdata: data.data\n\t};\n}\n\n/**\n * FeathersJS's `remove` method returns the whole item back, when fixture.store's `destroyData` gives back only the given query (e.g. {id: 123}).\n * Find the item by id first, then remove from fixture.store and return the item back.\n * \n * Feathers `remove` method emits 2 arguments with data: `id` and `query`. But we ignore 2nd data argument for now.\n * \n * @param destroyData The wrapped fixture.store.destroyData method.\n * @param getData The wrapped fixture.store.getData method.\n * @returns {Function}\n * @hide\n */\nfunction toFeathersRemoveHandler(getData, destroyData, options){\n\treturn function(id, query, fn){\n\t\tvar setQuery = wrapToId(options)(id);\n\t\tgetData(setQuery, function(err, item){\n\t\t\tif (err){\n\t\t\t\tfn(err);\n\t\t\t} else {\n\t\t\t\tdestroyData(setQuery, function(err, data){\n\t\t\t\t\tif (err){\n\t\t\t\t\t\tfn(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(null, item);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\nfunction toFeathersUpdateHandler(updateData, options){\n\treturn function(id, data, query, fn){\n\t\tvar setQuery = wrapToId(options)(id);\n\t\tupdateData(assign(setQuery, data), function(err, data2){\n\t\t\tif (err){\n\t\t\t\tfn(err);\n\t\t\t} else {\n\t\t\t\tfn(null, assign(setQuery, assign(data, data2)));\n\t\t\t}\n\t\t});\n\t}\n}\nfunction toFeathersCreateHandler(createData){\n\treturn function(data, query, fn){\n\t\tcreateData(data, function(err, data2){\n\t\t\tif (err){\n\t\t\t\tfn(err);\n\t\t\t} else {\n\t\t\t\tfn(null, assign(data, data2));\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = {\n\tsubscribeFeathersStoreToServer: subscribeFeathersStoreToServer\n};\n","/*\n * Summary: `io(url)` creates an instance of `io.Manager` for the given url and stores it in cache of managers `io.managers`.\n * If `io` is called with the same URL several times it will lookup Manager in the cache.\n * One manager creates one physical (transport) connection and can create several \"virtual\" connections within\n * the transport connection.\n * Manager has two main methods: `open` (alias `connect`) and `socket`. The first one establishes a transport connection\n * (e.g. http://localhost), the second one creates a socket.io connection (e.g. http://localhost/users).\n *\n * To fixture socket.io we need to:\n *   - mock a socket server;\n *   - override io.Manager.prototype methods to work with the mocked server.\n */\n\nvar subscribeFeathersStoreToServer = require('./feathers-client').subscribeFeathersStoreToServer;\n\n/* \n * See/update `docs/can-fixture-socket.server.md`.\n *\n * Mocked socket.io server that intercepts socket.io connection and can simulate socket.io server behaviour.\n * @constructor\n * @param {Object} io Imported `socket.io-client` object.\n */\nvar MockedServer = function(io){\n\tthis.io = io;\n\t\n\t// PubSub:\n\tthis.events = {};\n\tthis.subscribers = {};\n\n\t// SocketIO stores an instantiated Manager in cache to reuse it for the same URL.\n\t// Reset cache of managers since we override Manager prototype to work with this particular instance of the mocked server:\n\tresetManagerCache(io.managers);\n\n\t// Override Manager's prototype:\n\tthis.origs = mockManager(io.Manager.prototype, this);\n};\n\n/**\n * @function can-fixture-socket.Server.prototype.on on\n * @parent can-fixture-socket.Server.prototype\n * \n * Adds a socket event listener.\n * \n * @signature `server.on(event, handler)`\n * \n * Adds a socket event listener.\n * \n * ```js\n * server.on(\"notifications\", function(data, ackFn){\n *   console.log(\"Received \" + data);\n *   ackFn(\"Acknowledged, thank you\");\n * });\n * ```\n * \n *   @param {string} event The name of the socket event to listen for.\n *   @param {can-fixture-socket.socket-event-listener} handler The handler that will be executed to handle the socket event.\n * \n * @signature `server.on(eventsObject)`\n * \n * A short hand method to add multiple event listeners.\n * \n * ```js\n * server.on({\n *   \"news\": handleNews,\n *   \"tweets\": handleTweets,\n *   \"users\": handleUsers\n * });\n * ```\n * \n *   @param {object} eventsObject \n */\nMockedServer.prototype.on = function(event, cb){\n\tvar self = this;\n\tvar events = {};\n\tif (typeof event === 'string'){\n\t\tevents[event] = cb;\n\t}\n\tif (typeof event === 'object'){\n\t\tevents = event;\n\t}\n\tObject.keys(events).forEach(function(name){\n\t\tsub(self.events,  name, events[name]);\n\t})\n};\n\n/**\n * @function can-fixture-socket.Server.prototype.emit emit\n * @parent can-fixture-socket.Server.prototype\n * \n * Emits a socket event.\n *\n * @signature `server.emit(event, ...data, [ackFn])`\n *\n * Emits a socket event.\n *\n * ```js\n * server.emit(\"news\", data1, data2, function(ackData){\n *   console.log(\"Client acknowledged\", ackData);\n * });\n * ```\n *\n *   @param {string} event The name of the socket event.\n *   @param {*} data Data to be sent with the event. Socket.io allows to send more than one data objects.\n *   @param {function} [ackFn] The acknowledgement function that will be executed if the receiver calls the acknowledgement callback.\n */\nMockedServer.prototype.emit = function(event){\n\tvar dataArgs = Array.prototype.slice.call(arguments, 1);\n\tpub(this.subscribers, event, dataArgs);\n};\n\n/* \n * See/update `docs/can-fixture-socket.on-feathers-service.md`.\n * \n * Subscribes to mocked server socket events to work as FeathersJS CRUD service. Uses fixture store [can-fixture.Store] as a resource storage.\n * \n * @param {String} name The name of Feathers service.\n * @param {can-fixture.Store} fixtureStore An instance of [can-fixture.Store].\n * @param {Object} [options] Options, e.g. property name for id.\n */\nMockedServer.prototype.onFeathersService = function(serviceName, fixtureStore, options){\n\tsubscribeFeathersStoreToServer(serviceName, fixtureStore, this, options);\n};\n\n/**\n * @function can-fixture-socket.Server.prototype.restore restore\n * @parent can-fixture-socket.Server.prototype\n * \n * @signature `server.restore()`\n * \n * Restores `io.Manager.prototype` and clears `io.managers` cache.\n * \n * ```\n * server.restore();\n * ```\n */\nMockedServer.prototype.restore = function(){\n\trestoreManager(this.io.Manager.prototype, this.origs);\n\tresetManagerCache(this.io.managers);\n};\n\n/*\n * @constructor can-fixture-socket.Socket Socket\n * @private\n * @parent can-fixture-socket.types\n * \n * @signature `new Socket(server)`\n * \n * Manager instantiates Socket. We mock Socket's methods to work with the mocked server instance.\n * \n *   @param {can-fixture-socket.Server} server Mocked server.\n */\nvar MockedSocket = function(server){\n\tthis._server = server;\n\tthis.io = {\n\t\tengine: this\n\t};\n};\nMockedSocket.prototype = {\n\ton: function(event, cb){\n\t\tdebug('MockedSocket.on ... ' + event);\n\t\tsub(this._server.subscribers, event, cb);\n\t},\n\t/*\n\t * The first argument is always `event`\n\t * The middle arguments are data (usually one or two arguments).\n\t * If the last argument is a function then its the ACK callback.\n     */\n\temit: function(event){\n\t\tvar dataArgs = Array.prototype.slice.call(arguments, 1);\n\t\tdebug('MockedSocket.emit ...' + event);\n\t\tpub(this._server.events, event, dataArgs);\n\t},\n\tonce: function(){\n\t\tdebug('MockedSocket.once ...');\n\t},\n\toff: function(event, cb){\n\t\tdebug('MockedSocket.off ... ' + event);\n\t\tunsub(this._server.subscribers, event, cb);\n\t},\n\topen: function(){\n\t\treturn this.connect();\n\t},\n\tconnect: function(){\n\t\tthis.connected = true;\n\t\tthis.disconnected = false;\n\t},\n\tclose: function(){\n\t\treturn this.disconnect();\n\t},\n\tdisconnect: function(){\n\t\tthis.connected = false;\n\t\tthis.disconnected = true;\n\t},\n};\n\n/*\n * PubSub helpers.\n * @param pubsub A list of pubs or subs.\n * @param event {String} A name for a pubsub item (e.g. a name of event that we emit or subscribe to).\n * @param dataArgs There could be either one or more data arguments (e.g. FeathersJS) and the last argument can be used for ACK callback. \n */\nfunction pub(pubsub, event, dataArgs){\n\tdebug(' >>> pub ' + event);\n\tvar subscribers = pubsub[event] || [];\n\tsubscribers.forEach(function(subscriber){\n\t\tsubscriber.apply(null, dataArgs);\n\t});\n}\nfunction sub(pubsub, event, cb){\n\tdebug(' <<< sub ' + event);\n\tif (!pubsub[event]){\n\t\tpubsub[event] = [];\n\t}\n\tpubsub[event].push(cb);\n}\nfunction unsub(pubsub, event, cb){\n\tdebug(' <<< unsub ' + event);\n\tpubsub[event].forEach(function(registeredCb, index){\n\t\tif(registeredCb === cb){\n\t\t\tpubsub[event].splice(index, 1);\n\t\t}\n\t});\n}\n\n/*\n * Override Manager.prototype's method to work with the instantiated mocked server.\n * @param managerProto\n * @param server\n * @returns {Array}\n */\nfunction mockManager(managerProto, server){\n\t// We need to override `open` and `socket` methods:\n\tvar methods = ['open','socket'];\n\tvar origs = methods.map(function(name){\n\t\treturn {\n\t\t\tname: name,\n\t\t\tmethod: managerProto[name]\n\t\t};\n\t});\n\tmanagerProto.open = managerProto.connect = function(){\n\t\tdebug('MockedManager.prototype.open or connect ... arguments:', arguments);\n\t\tsetTimeout(function(){\n\t\t\tpub(server.subscribers, 'connect');\n\t\t\tpub(server.events, 'connection');\n\t\t}, 0);\n\t};\n\tmanagerProto.socket = function(){\n\t\tdebug('MockedManager.prototype.socket ...');\n\t\tvar socket = new MockedSocket(server);\n\t\tsocket.connected = true;\n\t\tsocket.disconnected = false;\n\t\treturn socket;\n\t};\n\treturn origs;\n}\n\n/*\n * Restore Manager prototype.\n * @param managerProto\n * @param origs\n */\nfunction restoreManager(managerProto, origs){\n\tdebug('Restore.');\n\torigs.forEach(function(orig){\n\t\tmanagerProto[orig.name] = orig.method;\n\t});\n}\n\n/*\n * We need to reset cache of Managers so that the new mocked server would create a new Manager for the same URL.\n * @param cache\n */\nfunction resetManagerCache(cache){\n\tfor (var i in cache){\n\t\tif (cache.hasOwnProperty(i)){\n\t\t\tdelete cache[i];\n\t\t}\n\t}\n}\n\nvar _DEBUG = false;\nfunction debug(msg, obj){\n\tif (_DEBUG){\n\t\tconsole.log.apply(console, arguments);\n\t}\n}\n\nmodule.exports = {\n\tServer: MockedServer,\n\tmockSocketManager: mockManager,\n\trestoreManager: restoreManager\n};\n\n\n","var fixtureSocket = require('./src/index');\nvar fixtureStore = require('./src/store');\n\nmodule.exports = {\n\tServer: fixtureSocket.Server,\n\trequestHandlerToListener: fixtureStore.requestHandlerToListener,\n\tstoreToListeners: fixtureStore.storeToListeners\n};\n"],"names":["extractResponse","require$$0","requestHandlerToListener","method","query","fn","data","response","apply","arguments","storeToListeners","fixtureStore","reduce","listeners","subscribeFeathersStoreToServer","serviceName","mockServer","options","on","toFeathersDataHandler","getListData","toFeathersFind","getData","wrapToId","toFeathersRemoveHandler","destroyData","toFeathersCreateHandler","createData","toFeathersUpdateHandler","updateData","queryTransformer","dataTransformer","args","Array","prototype","slice","call","length","err","id","o","total","count","limit","skip","offset","setQuery","item","assign","data2","MockedServer","io","this","events","subscribers","resetManagerCache","managers","origs","mockManager","Manager","event","cb","self","Object","keys","forEach","name","sub","emit","dataArgs","pub","onFeathersService","restore","restoreManager","MockedSocket","server","_server","engine","pubsub","subscriber","push","unsub","registeredCb","index","splice","managerProto","map","open","connect","setTimeout","socket","connected","disconnected","orig","cache","i","hasOwnProperty","once","off","close","disconnect","Server","mockSocketManager","fixtureSocket"],"mappings":"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"}