import"./chunk-5f1245ff.mjs";import{a as canReflect}from"./chunk-7e0220de.mjs";function isBuiltInPrototype(e){if(e===Object.prototype)return!0;var t=Object.prototype.toString.call(e),r="[object Object]"!==t,n=-1!==t.indexOf("[object ");return r&&n}function getDeepSize(e,t){if(0===t)return canReflect.size(e);if(0===canReflect.size(e))return 0;var r=0;return canReflect.each(e,function(e){r+=getDeepSize(e,t-1)}),r}function getDeep(e,t,r,n){if(e)if(n===r){if(!canReflect.isMoreListLikeThanMapLike(e))throw new Error("can-key-tree: Map-type leaf containers are not supported yet.");canReflect.addValues(t,canReflect.toArray(e))}else canReflect.each(e,function(e){getDeep(e,t,r+1,n)})}function clearDeep(e,t,r,n){if(r===t.length){if(!canReflect.isMoreListLikeThanMapLike(e))throw new Error("can-key-tree: Map-type leaf containers are not supported yet.");var c=canReflect.toArray(e);n&&c.forEach(function(e){n.apply(null,t.concat(e))}),canReflect.removeValues(e,c)}else canReflect.each(e,function(c,a){clearDeep(c,t.concat(a),r,n),canReflect.deleteKeyValue(e,a)})}var KeyTree=function(e,t){var r=e[0];canReflect.isConstructorLike(r)?this.root=new r:this.root=r,this.callbacks=t||{},this.treeStructure=e,this.empty=!0};canReflect.assign(KeyTree.prototype,{add:function(e){if(e.length>this.treeStructure.length)throw new Error("can-key-tree: Can not add path deeper than tree.");for(var t=this.root,r=!0===this.empty,n=0;n<e.length-1;n++){var c=e[n],a=canReflect.getKeyValue(t,c);if(!a){var i=this.treeStructure[n+1];a=isBuiltInPrototype(i.prototype)?new i:new i(c),canReflect.setKeyValue(t,c,a)}t=a}if(!canReflect.isMoreListLikeThanMapLike(t))throw new Error("can-key-tree: Map types are not supported yet.");return canReflect.addValues(t,[e[e.length-1]]),r&&(this.empty=!1,this.callbacks.onFirst&&this.callbacks.onFirst.call(this)),this},getNode:function(e){for(var t=this.root,r=0;r<e.length;r++){var n=e[r];if(!(t=canReflect.getKeyValue(t,n)))return}return t},get:function(e){var t=this.getNode(e);if(this.treeStructure.length===e.length)return t;var r=new(0,this.treeStructure[this.treeStructure.length-1]);return getDeep(t,r,e.length,this.treeStructure.length-1),r},delete:function(e,t){for(var r=this.root,n=[this.root],c=e[e.length-1],a=0;a<e.length-1;a++){var i=e[a],l=canReflect.getKeyValue(r,i);if(void 0===l)return!1;n.push(l),r=l}if(e.length)if(e.length===this.treeStructure.length){if(!canReflect.isMoreListLikeThanMapLike(r))throw new Error("can-key-tree: Map types are not supported yet.");t&&t.apply(null,e.concat(c)),canReflect.removeValues(r,[c])}else{var o=canReflect.getKeyValue(r,c);if(void 0===o)return!1;clearDeep(o,e,this.treeStructure.length-1,t),canReflect.deleteKeyValue(r,c)}else clearDeep(r,[],this.treeStructure.length-1,t);for(a=n.length-2;a>=0&&0===canReflect.size(r);a--)r=n[a],canReflect.deleteKeyValue(r,e[a]);return 0===canReflect.size(this.root)&&(this.empty=!0,this.callbacks.onEmpty&&this.callbacks.onEmpty.call(this)),!0},size:function(){return getDeepSize(this.root,this.treeStructure.length-1)},isEmpty:function(){return this.empty}});var canKeyTree;export{KeyTree as a,KeyTree as b};
//# sourceMappingURL=chunk-2c9f11a8.js.map
