{"version":3,"file":"chunk-660b4975.js","sources":["../node_modules/can-simple-observable/log.js","../node_modules/can-simple-observable/can-simple-observable.js"],"sourcesContent":["\"use strict\";\nvar dev = require(\"can-log/dev/dev\");\nvar canReflect = require(\"can-reflect\");\n\n// when printing out strings to the console, quotes are not included which\n// makes it confusing to tell the actual output from static string messages\nfunction quoteString(x) {\n\treturn typeof x === \"string\" ? JSON.stringify(x) : x;\n}\n\n// To add the `.log` function to a observable\n// a.- Add the log function to the propotype:\n//\t   `Observable.propotype.log = log`\n// b.- Make sure `._log` is called by the observable when mutation happens\n//     `_.log` should be passed the current value and the value before the mutation\nmodule.exports = function log() {\n\t//!steal-remove-start\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tthis._log = function(previous, current) {\n\t\t\tdev.log(\n\t\t\t\tcanReflect.getName(this),\n\t\t\t\t\"\\n is  \", quoteString(current),\n\t\t\t\t\"\\n was \", quoteString(previous)\n\t\t\t);\n\t\t};\n\t}\n\t//!steal-remove-end\n};\n","\"use strict\";\nvar log = require(\"./log\");\nvar ns = require(\"can-namespace\");\nvar canSymbol = require(\"can-symbol\");\nvar canReflect = require(\"can-reflect\");\nvar ObservationRecorder = require(\"can-observation-recorder\");\nvar valueEventBindings = require(\"can-event-queue/value/value\");\n\nvar dispatchSymbol = canSymbol.for(\"can.dispatch\");\n\n/**\n * @module {function} can-simple-observable\n * @parent can-observables\n * @collection can-infrastructure\n * @package ./package.json\n * @description Create an observable value.\n *\n * @signature `new SimpleObservable(initialValue)`\n *\n * Creates an observable value that can be read, written, and observed using [can-reflect].\n *\n * @param {*} initialValue The initial value of the observable.\n *\n * @return {can-simple-observable} An observable instance\n *\n * @body\n *\n * ## Use\n *\n * ```js\n *  var obs = new SimpleObservable('one');\n *\n *  canReflect.getValue(obs); // -> \"one\"\n *\n *  canReflect.setValue(obs, 'two');\n *  canReflect.getValue(obs); // -> \"two\"\n *\n *  function handler(newValue) {\n *    // -> \"three\"\n *  };\n *  canReflect.onValue(obs, handler);\n *  canReflect.setValue(obs, 'three');\n *\n *  canReflect.offValue(obs, handler);\n * ```\n */\nfunction SimpleObservable(initialValue) {\n\tthis._value = initialValue;\n}\n\n// mix in the value-like object event bindings\nvalueEventBindings(SimpleObservable.prototype);\n\ncanReflect.assignMap(SimpleObservable.prototype, {\n\tlog: log,\n\tget: function(){\n\t\tObservationRecorder.add(this);\n\t\treturn this._value;\n\t},\n\tset: function(value){\n\t\tvar old = this._value;\n\t\tthis._value = value;\n\n\t\tthis[dispatchSymbol](value, old);\n\t}\n});\nObject.defineProperty(SimpleObservable.prototype,\"value\",{\n\tset: function(value){\n\t\treturn this.set(value);\n\t},\n\tget: function(){\n\t\treturn this.get();\n\t}\n});\n\nvar simpleObservableProto = {\n\t\"can.getValue\": SimpleObservable.prototype.get,\n\t\"can.setValue\": SimpleObservable.prototype.set,\n\t\"can.isMapLike\": false,\n\t\"can.valueHasDependencies\": function(){\n\t\treturn true;\n\t}\n};\n\n//!steal-remove-start\nif (process.env.NODE_ENV !== 'production') {\n\tsimpleObservableProto[\"can.getName\"] = function() {\n\t\tvar value = this._value;\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\tvalue = JSON.stringify(value);\n\t\t}\n\t\telse {\n\t\t\tvalue = '';\n\t\t}\n\n\t\treturn canReflect.getName(this.constructor) + \"<\" + value + \">\";\n\t};\n}\n//!steal-remove-end\n\ncanReflect.assignSymbols(SimpleObservable.prototype, simpleObservableProto);\n\nmodule.exports = ns.SimpleObservable = SimpleObservable;\n"],"names":["quoteString","x","JSON","stringify","process","env","NODE_ENV","this","_log","previous","current","dev","log","canReflect","getName","dispatchSymbol","canSymbol","for","SimpleObservable","initialValue","_value","valueEventBindings","prototype","assignMap","get","ObservationRecorder","add","set","value","old","Object","defineProperty","simpleObservableProto","can.getValue","can.setValue","can.isMapLike","can.valueHasDependencies","constructor","assignSymbols","ns"],"mappings":"8cAMA,SAASA,YAAYC,GACpB,MAAoB,iBAANA,EAAiBC,KAAKC,UAAUF,GAAKA,EAQpD,QAAiB,WAEa,eAAzBG,UAAQC,IAAIC,WACfC,KAAKC,KAAO,SAASC,EAAUC,GAC9BC,IAAIC,IACHC,WAAWC,QAAQP,MACnB,UAAWP,YAAYU,GACvB,UAAWV,YAAYS,OCdvBM,eAAiBC,UAAUC,IAAI,gBAsCnC,SAASC,iBAAiBC,GACzBZ,KAAKa,OAASD,EAIfE,mBAAmBH,iBAAiBI,WAEpCT,WAAWU,UAAUL,iBAAiBI,UAAW,CAChDV,IAAKA,IACLY,IAAK,WAEJ,OADAC,oBAAoBC,IAAInB,MACjBA,KAAKa,QAEbO,IAAK,SAASC,GACb,IAAIC,EAAMtB,KAAKa,OACfb,KAAKa,OAASQ,EAEdrB,KAAKQ,gBAAgBa,EAAOC,MAG9BC,OAAOC,eAAeb,iBAAiBI,UAAU,QAAQ,CACxDK,IAAK,SAASC,GACb,OAAOrB,KAAKoB,IAAIC,IAEjBJ,IAAK,WACJ,OAAOjB,KAAKiB,SAId,IAAIQ,sBAAwB,CAC3BC,eAAgBf,iBAAiBI,UAAUE,IAC3CU,eAAgBhB,iBAAiBI,UAAUK,IAC3CQ,iBAAiB,EACjBC,2BAA4B,WAC3B,OAAO,IAKoB,eAAzBhC,UAAQC,IAAIC,WACf0B,sBAAsB,eAAiB,WACtC,IAAIJ,EAAQrB,KAAKa,OAQjB,OANCQ,EADoB,iBAAVA,GAAgC,OAAVA,EACxB1B,KAAKC,UAAUyB,GAGf,GAGFf,WAAWC,QAAQP,KAAK8B,aAAe,IAAMT,EAAQ,MAK9Df,WAAWyB,cAAcpB,iBAAiBI,UAAWU,+CAEpCO,UAAGrB,iBAAmBA"}