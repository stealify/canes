{"version":3,"file":"chunk-cc1f8896.js","sources":["../node_modules/can-globals/can-globals-proto.js","../node_modules/can-globals/can-globals-instance.js","../node_modules/can-globals/global/global.js"],"sourcesContent":["'use strict';\n\nvar canReflect = require('can-reflect');\n\nfunction dispatch(key) {\n\t// jshint -W040\n\tvar handlers = this.eventHandlers[key];\n\tif (handlers) {\n\t\tvar handlersCopy = handlers.slice();\n\t\tvar value = this.getKeyValue(key);\n\t\tfor (var i = 0; i < handlersCopy.length; i++) {\n\t\t\thandlersCopy[i](value);\n\t\t}\n\t}\n}\n\nfunction Globals() {\n\tthis.eventHandlers = {};\n\tthis.properties = {};\n}\n\n/**\n * @function define \n * @parent can-globals/methods\n * \n * Create a new global environment variable.\n * \n * @signature `globals.define(key, value[, cache])`\n * \n * Defines a new global called `key`, who's value defaults to `value`.\n * \n * The following example defines the `global` key's default value to the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object:\n * ```javascript\n * globals.define('global', window);\n * globals.getKeyValue('window') //-> window\n * ```\n * \n * If a function is provided and `cache` is falsy, that function is run every time the key value is read:\n * ```javascript\n * globals.define('isBrowserWindow', function() {\n *   console.log('EVALUATING')\n *   return typeof window !== 'undefined' &&\n *     typeof document !== 'undefined' && typeof SimpleDOM === 'undefined'\n * }, false);\n * globals.get('isBrowserWindow') // logs 'EVALUATING'\n *                                // -> true\n * globals.get('isBrowserWindow') // logs 'EVALUATING' again\n *                                // -> true\n * ```\n * \n * If a function is provided and `cache` is truthy, that function is run only the first time the value is read:\n * ```javascript\n * globals.define('isWebkit', function() {\n *   console.log('EVALUATING')\n *   var div = document.createElement('div')\n *   return 'WebkitTransition' in div.style\n * })\n * globals.getKeyValue('isWebkit') // logs 'EVALUATING'\n * \t\t\t\t\t\t\t\t   // -> true\n * globals.getKeyValue('isWebkit') // Does NOT log again!\n * \t\t\t\t\t\t\t\t   // -> true\n * ```\n * \n * @param {String} key\n * The key value to create.\n * \n * @param {*} value\n * The default value. If this is a function, its return value will be used.\n * \n * @param {Boolean} [cache=true]\n * Enable cache. If false the `value` function is run every time the key value is read.\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.define = function (key, value, enableCache) {\n\tif (enableCache === undefined) {\n\t\tenableCache = true;\n\t}\n\tif (!this.properties[key]) {\n\t\tthis.properties[key] = {\n\t\t\tdefault: value,\n\t\t\tvalue: value,\n\t\t\tenableCache: enableCache\n\t\t};\n\t}\n\treturn this;\n};\n\n/**\n * @function getKeyValue \n * @parent can-globals/methods\n * \n * Get a global environment variable by name.\n * \n * @signature `globals.getKeyValue(key)`\n * \n * Returns the current value at `key`. If no value has been set, it will return the default value (if it is not a function). If the default value is a function, it will return the output of the function. This execution is cached if the cache flag was set on initialization.\n * \n * ```javascript\n * globals.define('foo', 'bar');\n * globals.getKeyValue('foo'); //-> 'bar'\n * ```\n * \n * @param {String} key\n * The key value to access.\n * \n * @return {*}\n * Returns the value of a given key.\n */\nGlobals.prototype.getKeyValue = function (key) {\n\tvar property = this.properties[key];\n\tif (property) {\n\t\tif (typeof property.value === 'function') {\n\t\t\tif (property.cachedValue) {\n\t\t\t\treturn property.cachedValue;\n\t\t\t}\n\t\t\tif (property.enableCache) {\n\t\t\t\tproperty.cachedValue = property.value();\n\t\t\t\treturn property.cachedValue;\n\t\t\t} else {\n\t\t\t\treturn property.value();\n\t\t\t}\n\t\t}\n\t\treturn property.value;\n\t}\n};\n\nGlobals.prototype.makeExport = function (key) {\n\treturn function (value) {\n\t\tif (arguments.length === 0) {\n\t\t\treturn this.getKeyValue(key);\n\t\t}\n\n\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\tthis.deleteKeyValue(key);\n\t\t} else {\n\t\t\tif (typeof value === 'function') {\n\t\t\t\tthis.setKeyValue(key, function () {\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setKeyValue(key, value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}.bind(this);\n};\n\n/**\n * @function offKeyValue \n * @parent can-globals/methods\n * \n * Remove handler from event queue.\n * \n * @signature `globals.offKeyValue(key, handler)`\n * \n * Removes `handler` from future change events for `key`.\n * \n * \n * ```javascript\n * var handler = (value) => {\n *   value === 'baz' //-> true\n * };\n * globals.define('foo', 'bar');\n * globals.onKeyValue('foo', handler);\n * globals.setKeyValue('foo', 'baz');\n * globals.offKeyValue('foo', handler);\n * ```\n * \n * @param {String} key\n * The key value to observe.\n * \n * @param {Function} handler([value])\n * The observer callback.\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.offKeyValue = function (key, handler) {\n\tif (this.properties[key]) {\n\t\tvar handlers = this.eventHandlers[key];\n\t\tif (handlers) {\n\t\t\tvar i = handlers.indexOf(handler);\n\t\t\thandlers.splice(i, 1);\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * @function onKeyValue \n * @parent can-globals/methods\n * \n * Add handler to event queue.\n * \n * @signature `globals.onKeyValue(key, handler)`\n * \n * Calls `handler` each time the value of `key` is set or reset.\n * \n * ```javascript\n * globals.define('foo', 'bar');\n * globals.onKeyValue('foo', (value) => {\n *   value === 'baz' //-> true\n * });\n * globals.setKeyValue('foo', 'baz');\n * ```\n * \n * @param {String} key\n * The key value to observe.\n * \n * @param {function(*)} handler([value])\n * The observer callback.\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.onKeyValue = function (key, handler) {\n\tif (this.properties[key]) {\n\t\tif (!this.eventHandlers[key]) {\n\t\t\tthis.eventHandlers[key] = [];\n\t\t}\n\t\tthis.eventHandlers[key].push(handler);\n\t}\n\treturn this;\n};\n\n/**\n * @function deleteKeyValue \n * @parent can-globals/methods\n * \n * Reset global environment variable.\n * \n * @signature `globals.deleteKeyValue(key)`\n * \n * Deletes the current value at `key`. Future `get`s will use the default value.\n * \n * ```javascript\n * globals.define('global', window);\n * globals.setKeyValue('global', {});\n * globals.deleteKeyValue('global');\n * globals.getKeyValue('global') === window; //-> true\n * ```\n * \n * @param {String} key\n * The key value to access.\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.deleteKeyValue = function (key) {\n\tvar property = this.properties[key];\n\tif (property !== undefined) {\n\t\tproperty.value = property.default;\n\t\tproperty.cachedValue = undefined;\n\t\tdispatch.call(this, key);\n\t}\n\treturn this;\n};\n\n/**\n * @function setKeyValue \n * @parent can-globals/methods\n * \n * Overwrite an existing global environment variable.\n * \n * @signature `globals.setKeyValue(key, value)`\n * \n * ```javascript\n * globals.define('foo', 'bar');\n * globals.setKeyValue('foo', 'baz');\n * globals.getKeyValue('foo'); //-> 'baz'\n * ```\n * \n * Sets the new value at `key`. Will override previously set values, but preserves the default (see `deleteKeyValue`).\n * \n * Setting a key which was not previously defined will call `define` with the key and value.\n * \n * @param {String} key\n * The key value to access.\n * \n * @param {*} value\n * The new value.\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.setKeyValue = function (key, value) {\n\tif (!this.properties[key]) {\n\t\treturn this.define(key, value);\n\t}\n\tvar property = this.properties[key];\n\tproperty.value = value;\n\tproperty.cachedValue = undefined;\n\tdispatch.call(this, key);\n\treturn this;\n};\n\n/**\n * @function reset \n * @parent can-globals/methods\n * \n * Reset all keys to their default value and clear their caches.\n * \n * @signature `globals.setKeyValue(key, value)`\n * \n * ```javascript\n * globals.define('foo', 'bar');\n * globals.setKeyValue('foo', 'baz');\n * globals.getKeyValue('foo'); //-> 'baz'\n * globals.reset();\n * globals.getKeyValue('foo'); //-> 'bar'\n * ```\n * \n * @return {can-globals}\n * Returns the instance of `can-globals` for chaining.\n */\nGlobals.prototype.reset = function () {\n\tfor (var key in this.properties) {\n\t\tif (this.properties.hasOwnProperty(key)) {\n\t\t\tthis.properties[key].value = this.properties[key].default;\n\t\t\tthis.properties[key].cachedValue = undefined;\n\t\t\tdispatch.call(this, key);\n\t\t}\n\t}\n\treturn this;\n};\n\ncanReflect.assignSymbols(Globals.prototype, {\n\t'can.getKeyValue': Globals.prototype.getKeyValue,\n\t'can.setKeyValue': Globals.prototype.setKeyValue,\n\t'can.deleteKeyValue': Globals.prototype.deleteKeyValue,\n\t'can.onKeyValue': Globals.prototype.onKeyValue,\n\t'can.offKeyValue': Globals.prototype.offKeyValue\n});\n\nmodule.exports = Globals;\n","'use strict';\nvar namespace = require('can-namespace');\nvar Globals = require('./can-globals-proto');\nvar globals = new Globals();\n\nif (namespace.globals) {\n\tthrow new Error(\"You can't have two versions of can-globals, check your dependencies\");\n} else {\n\tmodule.exports = namespace.globals = globals;\n}\n","'use strict';\n\n/* global self */\n/* global WorkerGlobalScope */\n\nvar globals = require('can-globals/can-globals-instance');\n\n/**\n * @module {function} can-globals/global/global global\n * @parent can-globals/modules\n * \n * Get the global object for the current context.\n * \n * @signature `GLOBAL([newGlobal])`\n *\n * Optionally sets, and returns the global that this environment provides. It will be one of:\n * \n * ```js\n * var GLOBAL = require('can-globals/global/global');\n * var g = GLOBAL();\n * // In a browser\n * console.log(g === window); // -> true\n * ```\n *\n * - **Browser**: [`window`](https://developer.mozilla.org/en-US/docs/Web/API/window)\n * - **Web Worker**: [`self`](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n * - **Node.js**: [`global`](https://nodejs.org/api/globals.html#globals_global)\n * \n * @param {Object} [newGlobal] An optional global-like object to set as the context's global \n *\n * @return {Object} The global object for this JavaScript environment.\n */\nglobals.define('global', function(){\n\t// Web Worker\n\treturn (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? self :\n\n\t\t// Node.js\n\t\ttypeof process === 'object' &&\n\t\t{}.toString.call(process) === '[object process]' ? global :\n\n\t\t// Browser window\n\t\twindow;\n});\n\nmodule.exports = globals.makeExport('global');\n"],"names":["dispatch","key","handlers","this","eventHandlers","handlersCopy","slice","value","getKeyValue","i","length","Globals","properties","prototype","define","enableCache","undefined","default","property","cachedValue","makeExport","arguments","setKeyValue","deleteKeyValue","bind","offKeyValue","handler","indexOf","splice","onKeyValue","push","call","reset","hasOwnProperty","canReflect","assignSymbols","can.getKeyValue","can.setKeyValue","can.deleteKeyValue","can.onKeyValue","can.offKeyValue","globals","namespace","Error","module","WorkerGlobalScope","self","process","toString","global","window"],"mappings":"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"}