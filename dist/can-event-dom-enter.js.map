{"version":3,"file":"can-event-dom-enter.js","sources":["../node_modules/can-event-dom-enter/can-event-dom-enter.js"],"sourcesContent":["'use strict';\nvar namespace = require('can-namespace');\n\nvar baseEventType = 'keyup';\n\nfunction isEnterEvent (event) {\n\tvar hasEnterKey = event.key === 'Enter';\n\tvar hasEnterCode = event.keyCode === 13;\n\treturn hasEnterKey || hasEnterCode;\n}\n\n/**\n * @module {events} can-event-dom-enter\n * @parent can-dom-utilities\n * @collection can-infrastructure\n * @group can-event-dom-enter.modules modules\n * @package ./package.json\n *\n * Watch for when enter keys are pressed on a DomEventTarget.\n *\n * ```js\n * var domEvents = require('can-dom-events');\n * var enterEvent = require('can-event-dom-enter');\n *\n * domEvents.addEvent(enterEvent);\n *\n * var input = document.createElement('input');\n * function enterEventHandler() {\n * \tconsole.log('enter key pressed');\n * }\n *\n * domEvents.addEventHandler(input, 'enter', enterEventHandler);\n * domEvents.dispatch(input, {\n *   type: 'keyup',\n *   keyCode: keyCode\n * });\n * ```\n */\nvar enterEvent = {\n\tdefaultEventType: 'enter',\n\n\taddEventListener: function (target, eventType, handler) {\n\t\tvar keyHandler = function (event) {\n\t\t\tif (isEnterEvent(event)) {\n\t\t\t\treturn handler.apply(this, arguments);\n\t\t\t}\n\t\t};\n\n\t\tvar handlerMap = enterEvent._eventTypeHandlerMap[eventType];\n\t\tif (!handlerMap) {\n\t\t\thandlerMap = enterEvent._eventTypeHandlerMap[eventType] = new Map();\n\t\t}\n\n\t\thandlerMap.set(handler, keyHandler);\n\t\tthis.addEventListener(target, baseEventType, keyHandler);\n\t},\n\n\tremoveEventListener: function (target, eventType, handler) {\n\t\tvar handlerMap = enterEvent._eventTypeHandlerMap[eventType];\n\t\tif (handlerMap) {\n\t\t\tvar keyHandler = handlerMap.get(handler);\n\t\t\tif (keyHandler) {\n\t\t\t\thandlerMap.delete(handler);\n\t\t\t\tif (handlerMap.size === 0) {\n\t\t\t\t\tdelete enterEvent._eventTypeHandlerMap[eventType];\n\t\t\t\t}\n\t\t\t\tthis.removeEventListener(target, baseEventType, keyHandler);\n\t\t\t}\n\t\t}\n\t},\n\n\t// {[eventType: string]: WeakMap<OriginalHandler, KeyEventHandler>}\n\t_eventTypeHandlerMap: {}\n};\n\nmodule.exports = namespace.domEventEnter = enterEvent;\n"],"names":["baseEventType","isEnterEvent","event","hasEnterKey","key","hasEnterCode","keyCode","enterEvent","defaultEventType","addEventListener","target","eventType","handler","keyHandler","apply","this","arguments","handlerMap","_eventTypeHandlerMap","Map","set","removeEventListener","get","delete","size","namespace","domEventEnter"],"mappings":"4EAGA,IAAIA,cAAgB,QAEpB,SAASC,aAAcC,GACtB,IAAIC,EAA4B,UAAdD,EAAME,IACpBC,EAAiC,KAAlBH,EAAMI,QACzB,OAAOH,GAAeE,EA8BvB,IAAIE,WAAa,CAChBC,iBAAkB,QAElBC,iBAAkB,SAAUC,EAAQC,EAAWC,GAC9C,IAAIC,EAAa,SAAUX,GAC1B,GAAID,aAAaC,GAChB,OAAOU,EAAQE,MAAMC,KAAMC,YAIzBC,EAAaV,WAAWW,qBAAqBP,GAC5CM,IACJA,EAAaV,WAAWW,qBAAqBP,GAAa,IAAIQ,KAG/DF,EAAWG,IAAIR,EAASC,GACxBE,KAAKN,iBAAiBC,EAAQV,cAAea,IAG9CQ,oBAAqB,SAAUX,EAAQC,EAAWC,GACjD,IAAIK,EAAaV,WAAWW,qBAAqBP,GACjD,GAAIM,EAAY,CACf,IAAIJ,EAAaI,EAAWK,IAAIV,GAC5BC,IACHI,EAAWM,OAAOX,GACM,IAApBK,EAAWO,aACPjB,WAAWW,qBAAqBP,GAExCI,KAAKM,oBAAoBX,EAAQV,cAAea,MAMnDK,qBAAsB,qBAGNO,UAAUC,cAAgBnB"}