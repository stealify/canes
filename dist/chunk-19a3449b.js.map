{"version":3,"file":"chunk-19a3449b.js","sources":["../node_modules/can-diff/deep/deep.js"],"sourcesContent":["\"use strict\";\nvar diffMap = require(\"../map/map\"),\n    diffList = require(\"../list/list\"),\n    canReflect = require(\"can-reflect\");\n\nfunction shouldCheckSet(patch, destVal, sourceVal) {\n    return patch.type === \"set\" && destVal && sourceVal &&\n        typeof destVal === \"object\" &&\n        typeof sourceVal === \"object\";\n}\n\nfunction makeIdentityFromMapSchema(typeSchema) {\n    if(typeSchema.identity && typeSchema.identity.length) {\n        return function identityCheck(a, b) {\n            var aId = canReflect.getIdentity(a, typeSchema),\n                bId = canReflect.getIdentity(b, typeSchema);\n            return aId === bId;\n        };\n    }\n}\n\nfunction makeDiffListIdentityComparison(oldList, newList, parentKey, nestedPatches) {\n    var listSchema = canReflect.getSchema(oldList),\n        typeSchema,\n        identityCheckFromSchema,\n        oldListLength = canReflect.size( oldList );\n    if(listSchema != null) {\n        if(listSchema.values != null) {\n            typeSchema = canReflect.getSchema(listSchema.values);\n        }\n    }\n    if(typeSchema == null && oldListLength > 0) {\n        typeSchema = canReflect.getSchema( canReflect.getKeyValue(oldList, 0) );\n    }\n    if(typeSchema) {\n        identityCheckFromSchema = makeIdentityFromMapSchema(typeSchema);\n    }\n\n\n    return function(a, b, aIndex) {\n        if(canReflect.isPrimitive(a)) {\n            return a === b;\n        }\n        if(canReflect.isPrimitive(b)) {\n            return a === b;\n        }\n        if(identityCheckFromSchema) {\n            if(identityCheckFromSchema(a, b)) {\n                var patches = diffDeep(a, b, parentKey ? parentKey+\".\"+aIndex : \"\"+aIndex);\n                nestedPatches.push.apply(nestedPatches, patches);\n                return true;\n            }\n        }\n        return diffDeep(a, b).length === 0;\n    };\n}\n\nfunction diffDeep(dest, source, parentKey){\n\n    if (dest && canReflect.isMoreListLikeThanMapLike(dest)) {\n        var nestedPatches = [],\n            diffingIdentity = makeDiffListIdentityComparison(dest, source, parentKey, nestedPatches);\n\n        var primaryPatches = diffList(dest, source, diffingIdentity).map(function(patch){\n            if(parentKey) {\n                patch.key = parentKey;\n            }\n            return patch;\n        });\n\n\t\treturn nestedPatches.concat(primaryPatches);\n\t} else {\n        parentKey = parentKey ? parentKey+\".\": \"\";\n\t\tvar patches = diffMap(dest, source);\n        // any sets we are going to recurse within\n        var finalPatches = [];\n        patches.forEach(function(patch){\n            var key = patch.key;\n\n            patch.key = parentKey + patch.key;\n            var destVal = dest && canReflect.getKeyValue(dest, key),\n                sourceVal = source && canReflect.getKeyValue(source, key);\n            if(shouldCheckSet(patch, destVal, sourceVal)) {\n\n                var deepPatches = diffDeep(destVal, sourceVal, patch.key);\n                finalPatches.push.apply(finalPatches, deepPatches);\n            } else {\n                finalPatches.push(patch);\n            }\n        });\n        return finalPatches;\n\t}\n}\n\nmodule.exports = diffDeep;\n"],"names":["shouldCheckSet","patch","destVal","sourceVal","type","makeIdentityFromMapSchema","typeSchema","identity","length","a","b","canReflect","getIdentity","makeDiffListIdentityComparison","oldList","newList","parentKey","nestedPatches","identityCheckFromSchema","listSchema","getSchema","oldListLength","size","values","getKeyValue","aIndex","isPrimitive","patches","diffDeep","push","apply","dest","source","isMoreListLikeThanMapLike","diffingIdentity","primaryPatches","diffList","map","key","concat","diffMap","finalPatches","forEach","deepPatches"],"mappings":"yKAKA,SAASA,eAAeC,EAAOC,EAASC,GACpC,MAAsB,QAAfF,EAAMG,MAAkBF,GAAWC,GACnB,iBAAZD,GACc,iBAAdC,EAGf,SAASE,0BAA0BC,GAC/B,GAAGA,EAAWC,UAAYD,EAAWC,SAASC,OAC1C,OAAO,SAAuBC,EAAGC,GAG7B,OAFUC,WAAWC,YAAYH,EAAGH,KAC1BK,WAAWC,YAAYF,EAAGJ,IAMhD,SAASO,+BAA+BC,EAASC,EAASC,EAAWC,GACjE,IACIX,EACAY,EAFAC,EAAaR,WAAWS,UAAUN,GAGlCO,EAAgBV,WAAWW,KAAMR,GAcrC,OAbiB,MAAdK,GACyB,MAArBA,EAAWI,SACVjB,EAAaK,WAAWS,UAAUD,EAAWI,SAGpC,MAAdjB,GAAsBe,EAAgB,IACrCf,EAAaK,WAAWS,UAAWT,WAAWa,YAAYV,EAAS,KAEpER,IACCY,EAA0Bb,0BAA0BC,IAIjD,SAASG,EAAGC,EAAGe,GAClB,GAAGd,WAAWe,YAAYjB,GACtB,OAAOA,IAAMC,EAEjB,GAAGC,WAAWe,YAAYhB,GACtB,OAAOD,IAAMC,EAEjB,GAAGQ,GACIA,EAAwBT,EAAGC,GAAI,CAC9B,IAAIiB,EAAUC,SAASnB,EAAGC,EAAGM,EAAYA,EAAU,IAAIS,EAAS,GAAGA,GAEnE,OADAR,EAAcY,KAAKC,MAAMb,EAAeU,IACjC,EAGf,OAAiC,IAA1BC,SAASnB,EAAGC,GAAGF,QAI9B,SAASoB,SAASG,EAAMC,EAAQhB,GAE5B,GAAIe,GAAQpB,WAAWsB,0BAA0BF,GAAO,CACpD,IAAId,EAAgB,GAChBiB,EAAkBrB,+BAA+BkB,EAAMC,EAAQhB,EAAWC,GAE1EkB,EAAiBC,KAASL,EAAMC,EAAQE,GAAiBG,IAAI,SAASpC,GAItE,OAHGe,IACCf,EAAMqC,IAAMtB,GAETf,IAGjB,OAAOgB,EAAcsB,OAAOJ,GAEtBnB,EAAYA,EAAYA,EAAU,IAAK,GAC7C,IAAIW,EAAUa,WAAQT,EAAMC,GAElBS,EAAe,GAenB,OAdAd,EAAQe,QAAQ,SAASzC,GACrB,IAAIqC,EAAMrC,EAAMqC,IAEhBrC,EAAMqC,IAAMtB,EAAYf,EAAMqC,IAC9B,IAAIpC,EAAU6B,GAAQpB,WAAWa,YAAYO,EAAMO,GAC/CnC,EAAY6B,GAAUrB,WAAWa,YAAYQ,EAAQM,GACzD,GAAGtC,eAAeC,EAAOC,EAASC,GAAY,CAE1C,IAAIwC,EAAcf,SAAS1B,EAASC,EAAWF,EAAMqC,KACrDG,EAAaZ,KAAKC,MAAMW,EAAcE,QAEtCF,EAAaZ,KAAK5B,KAGnBwC,EAIf,SAAiBb"}