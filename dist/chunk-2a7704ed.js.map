{"version":3,"file":"chunk-2a7704ed.js","sources":["../node_modules/can-view-model/can-view-model.js"],"sourcesContent":["\"use strict\";\n\nvar SimpleMap = require(\"can-simple-map\");\nvar ns = require(\"can-namespace\");\nvar getDocument = require(\"can-globals/document/document\");\nvar canReflect = require(\"can-reflect\");\nvar canSymbol = require('can-symbol');\n\nvar viewModelSymbol = canSymbol.for('can.viewModel');\n\nmodule.exports = ns.viewModel = function (el, attr, val) {\n\tif (typeof el === \"string\") {\n\t\tel = getDocument().querySelector(el);\n\t} else if (canReflect.isListLike(el) && !el.nodeType) {\n\t\tel = el[0];\n\t}\n\n\tif (canReflect.isObservableLike(attr) && canReflect.isMapLike(attr)) {\n\t\tel[viewModelSymbol] = attr;\n\t\treturn;\n\t}\n\n\tvar scope = el[viewModelSymbol];\n\tif(!scope) {\n\t\tscope = new SimpleMap();\n\t\tel[viewModelSymbol] = scope;\n\t}\n\tswitch (arguments.length) {\n\t\tcase 0:\n\t\tcase 1:\n\t\t\treturn scope;\n\t\tcase 2:\n\t\t\treturn canReflect.getKeyValue(scope, attr);\n\t\tdefault:\n\t\t\tcanReflect.setKeyValue(scope, attr, val);\n\t\t\treturn el;\n\t}\n};\n"],"names":["viewModelSymbol","canSymbol","for","ns","viewModel","el","attr","val","getDocument","querySelector","canReflect","isListLike","nodeType","isObservableLike","isMapLike","scope","SimpleMap","arguments","length","getKeyValue","setKeyValue"],"mappings":"uUAQA,IAAIA,gBAAkBC,UAAUC,IAAI,8BAEnBC,UAAGC,UAAY,SAAUC,EAAIC,EAAMC,GAOnD,GANkB,iBAAPF,EACVA,EAAKG,cAAcC,cAAcJ,GACvBK,WAAWC,WAAWN,KAAQA,EAAGO,WAC3CP,EAAKA,EAAG,IAGLK,WAAWG,iBAAiBP,IAASI,WAAWI,UAAUR,GAC7DD,EAAGL,iBAAmBM,MADvB,CAKA,IAAIS,EAAQV,EAAGL,iBAKf,OAJIe,IACHA,EAAQ,IAAIC,UACZX,EAAGL,iBAAmBe,GAEfE,UAAUC,QACjB,KAAK,EACL,KAAK,EACJ,OAAOH,EACR,KAAK,EACJ,OAAOL,WAAWS,YAAYJ,EAAOT,GACtC,QAEC,OADAI,WAAWU,YAAYL,EAAOT,EAAMC,GAC7BF"}