{"version":3,"file":"can-route-mock.js","sources":["../node_modules/can-route-mock/can-route-mock.js"],"sourcesContent":["var SimpleObservable = require(\"can-simple-observable\");\nvar canReflect = require(\"can-reflect\");\n\nfunction MockRoute(){\n    this.routeValue = new SimpleObservable(\"\");\n}\ncanReflect.assignMap(MockRoute.prototype,{\n    paramsMatcher: /^(?:&[^=]+=[^&]*)+/,\n    querySeparator: \"&\",\n    // don't greedily match slashes in routing rules\n    matchSlashes: false,\n    root: \"#!\",\n    get: function(){\n        return this.value;\n    },\n    set: function(newVal){\n        return this.value = newVal;\n    },\n    on: function(handler){\n        canReflect.onValue(this, handler);\n    },\n    off: function(handler){\n        canReflect.offValue(this, handler);\n    }\n});\n\nObject.defineProperty(MockRoute.prototype,\"value\",{\n    get: function(){\n        return this.routeValue.get().split(/#!?/)[1] || \"\";\n    },\n    set: function(path){\n        if(path[0] !== \"#\") {\n\t\t\tthis.routeValue.set(\"#\"+(path || \"\"));\n\t\t} else {\n\t\t\tthis.routeValue.set(path || \"\");\n\t\t}\n\t\treturn path;\n    }\n});\n\ncanReflect.assignSymbols(MockRoute.prototype,{\n    \"can.onValue\": function(handler){\n        this.routeValue.on(handler);\n    },\n    \"can.offValue\": function(handler) {\n        this.routeValue.off(handler);\n    },\n    // Gets the part of the url we are determinging the route from.\n    // For hashbased routing, it's everything after the #, for\n    // pushState it's configurable\n    \"can.getValue\": function() {\n        return this.value;\n    },\n    // gets called with the serializedcanRoute data after a route has changed\n    // returns what the url has been updated to (for matching purposes)\n    \"can.setValue\": function(path){\n\t\tthis.value = path;\n    }\n});\n\n\nmodule.exports = MockRoute;\n"],"names":["MockRoute","this","routeValue","SimpleObservable","canReflect","assignMap","prototype","paramsMatcher","querySeparator","matchSlashes","root","get","value","set","newVal","on","handler","onValue","off","offValue","Object","defineProperty","split","path","assignSymbols","can.onValue","can.offValue","can.getValue","can.setValue"],"mappings":"orBAGA,SAASA,YACLC,KAAKC,WAAa,IAAIC,iBAAiB,IAE3CC,WAAWC,UAAUL,UAAUM,UAAU,CACrCC,cAAe,qBACfC,eAAgB,IAEhBC,cAAc,EACdC,KAAM,KACNC,IAAK,WACD,OAAOV,KAAKW,OAEhBC,IAAK,SAASC,GACV,OAAOb,KAAKW,MAAQE,GAExBC,GAAI,SAASC,GACTZ,WAAWa,QAAQhB,KAAMe,IAE7BE,IAAK,SAASF,GACVZ,WAAWe,SAASlB,KAAMe,MAIlCI,OAAOC,eAAerB,UAAUM,UAAU,QAAQ,CAC9CK,IAAK,WACD,OAAOV,KAAKC,WAAWS,MAAMW,MAAM,OAAO,IAAM,IAEpDT,IAAK,SAASU,GAMhB,MALqB,MAAZA,EAAK,GACbtB,KAAKC,WAAWW,IAAI,KAAKU,GAAQ,KAEjCtB,KAAKC,WAAWW,IAAIU,GAAQ,IAEtBA,KAITnB,WAAWoB,cAAcxB,UAAUM,UAAU,CACzCmB,cAAe,SAAST,GACpBf,KAAKC,WAAWa,GAAGC,IAEvBU,eAAgB,SAASV,GACrBf,KAAKC,WAAWgB,IAAIF,IAKxBW,eAAgB,WACZ,OAAO1B,KAAKW,OAIhBgB,eAAgB,SAASL,GAC3BtB,KAAKW,MAAQW,KAKf,iBAAiBvB"}