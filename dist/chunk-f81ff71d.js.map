{"version":3,"file":"chunk-f81ff71d.js","sources":["../node_modules/can-memory-store/can-memory-store.js"],"sourcesContent":["var canReflect = require(\"can-reflect\");\nvar namespace = require(\"can-namespace\");\n\nvar makeSimpleStore = require(\"./make-simple-store\");\n\n\nmodule.exports = namespace.memoryStore = function memoryStore(baseConnection){\n    baseConnection.constructor = memoryStore;\n    var behavior = Object.create(makeSimpleStore(baseConnection));\n\n    canReflect.assignMap(behavior, {\n\t\tclear: function(){\n\t\t\tthis._instances = {};\n\t\t\tthis._queries = [];\n\t\t},\n\t\t_queryData: [],\n\t\tupdateQueryDataSync: function(queries){\n\t\t\tthis._queryData = queries;\n\t\t},\n\t\tgetQueryDataSync: function(){\n\t\t\treturn this._queryData;\n\t\t},\n\n\t\t_instances: {},\n\t\tgetRecord: function(id){\n\t\t\treturn this._instances[id];\n\t\t},\n\t\tgetAllRecords: function(){\n\t\t\tvar records = [];\n\t\t\tfor(var id in this._instances) {\n\t\t\t\trecords.push(this._instances[id]);\n\t\t\t}\n\t\t\treturn records;\n\t\t},\n\t\tdestroyRecords: function(records) {\n\t\t\tcanReflect.eachIndex(records, function(record){\n\t\t\t\tvar id = canReflect.getIdentity(record, this.queryLogic.schema);\n\t\t\t\tdelete this._instances[id];\n\t\t\t}, this);\n\t\t},\n\t\tupdateRecordsSync: function(records){\n\t\t\trecords.forEach(function(record){\n\t\t\t\tvar id = canReflect.getIdentity(record, this.queryLogic.schema);\n\t\t\t\tthis._instances[id] = record;\n\t\t\t},this);\n\t\t},\n\n\t\t// ## External interface\n\n\t\t/**\n\t\t * @function can-memory-store.getQueries getQueries\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Returns the queries contained within the cache.\n\t\t *\n\t\t * @signature `connection.getQueries()`\n\t\t *\n\t\t *   Returns the queries added by [can-memory-store.updateListData].\n\t\t *\n\t\t *   @return {Promise<Array<can-query-logic/query>>} A promise that resolves to the list of queries.\n\t\t *\n\t\t * @body\n\t\t *\n\t\t * ## Use\n\t\t *\n\t\t * ```js\n\t\t * connection.getSets() //-> Promise( [{type: \"completed\"},{user: 5}] )\n\t\t * ```\n\t\t *\n\t\t */\n\n\t\t/**\n\t\t * @function can-memory-store.clear clear\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Resets the memory store so it contains nothing.\n\t\t *\n\t\t * @signature `connection.clear()`\n\t\t *\n\t\t *   Removes all instances and lists being stored in memory.\n\t\t *\n\t\t *   ```js\n\t\t *   memoryStore({queryLogic: new QueryLogic()});\n\t\t *\n\t\t *   cacheConnection.updateInstance({id: 5, name: \"justin\"});\n\t\t *\n\t\t *   cacheConnection.getData({id: 5}).then(function(data){\n\t\t *     data //-> {id: 5, name: \"justin\"}\n\t\t *     cacheConnection.clear();\n\t\t *     cacheConnection.getData({id: 5}).catch(function(err){\n\t\t *       err -> {message: \"no data\", error: 404}\n\t\t *     });\n\t\t *   });\n\t\t *   ```\n\t\t *\n\t\t */\n\n\t\t/**\n\t\t * @function can-memory-store.getListData getListData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Gets a list of data from the memory store.\n\t\t *\n\t\t * @signature `connection.getListData(query)`\n\t\t *\n\t\t *   Goes through each query add by [can-memory-store.updateListData]. If\n\t\t *   `query` is a subset, uses [can-connect/base/base.queryLogic] to get the data for the requested `query`.\n\t\t *\n\t\t *   @param {can-query-logic/query} query An object that represents the data to load.\n\t\t *\n\t\t *   @return {Promise<can-connect.listData>} A promise that resolves if `query` is a subset of\n\t\t *   some data added by [can-memory-store.updateListData].  If it is not,\n\t\t *   the promise is rejected.\n\t\t */\n\n\t\t/**\n\t\t * @function can-connect/data/memory-cache.getListDataSync getListDataSync\n\t\t * @parent can-connect/data/memory-cache.data-methods\n\t\t *\n\t\t * Synchronously gets a query of data from the memory cache.\n\t\t *\n\t\t * @signature `connection.getListDataSync(query)`\n\t\t * @hide\n\t\t */\n\n\n\t\t/**\n\t\t * @function can-memory-store.updateListData updateListData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Saves a query of data in the cache.\n\t\t *\n\t\t * @signature `connection.updateListData(listData, query)`\n\t\t *\n\t\t *   Tries to merge this query of data with any other saved queries of data. If\n\t\t *   unable to merge this data, saves the query by itself.\n\t\t *\n\t\t *   @param {can-connect.listData} listData The data that belongs to `query`.\n\t\t *   @param {can-query-logic/query} query The query `listData` belongs to.\n\t\t *   @return {Promise} Promise resolves if and when the data has been successfully saved.\n\t\t */\n\n\n\t\t/**\n\t\t * @function can-memory-store.getData getData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Get an instance's data from the memory cache.\n\t\t *\n\t\t * @signature `connection.getData(params)`\n\t\t *\n\t\t *   Looks in the instance store for the requested instance.\n\t\t *\n\t\t *   @param {Object} params An object that should have the [conenction.id] of the element\n\t\t *   being retrieved.\n\t\t *\n\t\t *   @return {Promise} A promise that resolves to the item if the memory cache has this item.\n\t\t *   If the memory cache does not have this item, it rejects the promise.\n\t\t */\n\n\n\n\n\t\t/**\n\t\t * @function can-memory-store.createData createData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Called when an instance is created and should be added to cache.\n\t\t *\n\t\t * @signature `connection.createData(record)`\n\t\t *\n\t\t *   Adds `record` to the stored list of instances. Then, goes\n\t\t *   through every query and adds record the queries it belongs to.\n\t\t */\n\n\n\t\t/**\n\t\t * @function can-memory-store.updateData updateData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Called when an instance is updated.\n\t\t *\n\t\t * @signature `connection.updateData(record)`\n\t\t *\n\t\t *   Overwrites the stored instance with the new record. Then, goes\n\t\t *   through every query and adds or removes the instance if it belongs or not.\n\t\t */\n\n\t\t/**\n\t\t * @function can-memory-store.destroyData destroyData\n\t\t * @parent can-memory-store.data-methods\n\t\t *\n\t\t * Called when an instance should be removed from the cache.\n\t\t *\n\t\t * @signature `connection.destroyData(record)`\n\t\t *\n\t\t *   Goes through each query of data and removes any data that matches\n\t\t *   `record`'s [can-connect/base/base.id]. Finally removes this from the instance store.\n\t\t */\n\n\t});\n\n\treturn behavior;\n\n};\n"],"names":["namespace","memoryStore","baseConnection","constructor","behavior","Object","create","makeSimpleStore","canReflect","assignMap","clear","this","_instances","_queries","_queryData","updateQueryDataSync","queries","getQueryDataSync","getRecord","id","getAllRecords","records","push","destroyRecords","eachIndex","record","getIdentity","queryLogic","schema","updateRecordsSync","forEach"],"mappings":"kOAMiBA,UAAUC,YAAc,SAASA,EAAYC,GAC1DA,EAAeC,YAAcF,EAC7B,IAAIG,EAAWC,OAAOC,OAAOC,gBAAgBL,IAkMhD,OAhMGM,WAAWC,UAAUL,EAAU,CACjCM,MAAO,WACNC,KAAKC,WAAa,GAClBD,KAAKE,SAAW,IAEjBC,WAAY,GACZC,oBAAqB,SAASC,GAC7BL,KAAKG,WAAaE,GAEnBC,iBAAkB,WACjB,OAAON,KAAKG,YAGbF,WAAY,GACZM,UAAW,SAASC,GACnB,OAAOR,KAAKC,WAAWO,IAExBC,cAAe,WACd,IAAIC,EAAU,GACd,IAAI,IAAIF,KAAMR,KAAKC,WAClBS,EAAQC,KAAKX,KAAKC,WAAWO,IAE9B,OAAOE,GAERE,eAAgB,SAASF,GACxBb,WAAWgB,UAAUH,EAAS,SAASI,GACtC,IAAIN,EAAKX,WAAWkB,YAAYD,EAAQd,KAAKgB,WAAWC,eACjDjB,KAAKC,WAAWO,IACrBR,OAEJkB,kBAAmB,SAASR,GAC3BA,EAAQS,QAAQ,SAASL,GACxB,IAAIN,EAAKX,WAAWkB,YAAYD,EAAQd,KAAKgB,WAAWC,QACxDjB,KAAKC,WAAWO,GAAMM,GACrBd,SA8JGP"}