import{c as helpers,d as makeEnum,b as SET}from"./chunk-0826a8c3.mjs";import"./chunk-5f1245ff.mjs";import{a as transform}from"./chunk-46f90238.mjs";import{a as deleteKey}from"./chunk-849fe8d8.mjs";import{a as get}from"./chunk-b09dcf0e.mjs";import{a as QueryLogic}from"./chunk-723b8216.mjs";import{a as canReflect}from"./chunk-7e0220de.mjs";import"./chunk-b37d91a1.mjs";import"./chunk-805ffcb4.mjs";import"./chunk-3b4c7b38.mjs";import"./chunk-bd824939.mjs";import"./chunk-75bea8d8.mjs";import"./chunk-b1806013.mjs";import"./chunk-d2889630.mjs";import"./chunk-bacf0c54.mjs";import"./chunk-585d4076.mjs";var defaultAlgebra,IsBoolean=function(){};function hasKey(e,r,t,n){if(e&&"object"==typeof e)for(var a in e)if(r[a]){if("function"!=typeof r[a])return!0;t[n]=r[a](e)}else if(hasKey(e[a],r,e,a))return!0;return!1}function convertToJSONAPISort(e){var r=e.split(" ");return"desc"===(r[1]||"").toLowerCase()?"-"+r[0]:r[0]}function convertToLegacySort(e){var r=helpers.sortData(e);return r.desc?"-"+r.prop:r.prop}makeEnum(IsBoolean,[!0,!1],function(e){return"true"===e||"false"!==e&&e});var set={UNIVERSAL:SET.UNIVERSAL,EMPTY:SET.EMPTY,UNDEFINABLE:SET.UNDEFINABLE,UNKNOWABLE:SET.UNKNOWABLE,Algebra:function(){var e={schema:[],hydrate:[],serialize:[]};canReflect.eachIndex(arguments,function(r){for(var t in r){if(!e[t])throw new Error("can-query-logic: This type of configuration is not supported. Please use can-query-logic directly.");e[t].push(r[t])}});var r=canReflect.assignSymbols({},{"can.getSchema":function(){var r={kind:"record",identity:[],keys:{}};return e.schema.forEach(function(e){e(r)}),r.identity.length||r.identity.push("id"),r}});return new QueryLogic(r,{toQuery:function(r){return e.hydrate.reduce(function(e,r){return r(e)},{filter:r})},toParams:function(r){if(SET.isSpecial(r))return r;if(Array.isArray(r.filter))return SET.UNDEFINABLE;var t=r.filter||{};if(hasKey(t,{$ne:!0,$in:function(e){return e.$in}}))return SET.UNDEFINABLE;var n=e.serialize.reduce(function(e,r){return r(e)},r);return t=n.filter||{},delete n.filter,canReflect.assign(n,t)}})},Translate:function(e,r){if("where"!==e)throw new Error("can-query-logic/compat.Translate is only able to translate the where clause");return{hydrate:function(e){var t=canReflect.serialize(e),n=t.filter[r];return delete t.filter[r],n&&canReflect.assign(t.filter,n),t},serialize:function(e){if(e.filter){var t=canReflect.serialize(e),n=e.filter;return t.filter={},t.filter[r]=n,t}return e}}},props:{boolean:function(e){return{schema:function(r){r.keys[e]=IsBoolean}}},dotNotation:function(){return{}},enum:function(e,r){function t(){}return makeEnum(t,r),{schema:function(r){r.keys[e]=t}}},id:function(e){return{schema:function(r){r.identity.push(e)}}},offsetLimit:function(e,r){return e=e||"offset",r=r||"limit",{hydrate:function(t){var n=canReflect.serialize(t);return(e in n.filter||r in n.filter)&&(n.page={}),e in n.filter&&(n.page.start=parseInt(n.filter[e],10),delete n.filter[e]),r in n.filter&&(n.page.end=(n.page.start||0)+parseInt(n.filter[r],10)-1,delete n.filter[r]),n},serialize:function(t){var n=canReflect.serialize(t);return n.page&&(n[e]=n.page.start,n[r]=n.page.end-n.page.start+1,delete n.page),n}}},rangeInclusive:function(e,r){var t={};t["filter."+e]="page.start",t["filter."+r]="page.end";var n={"page.start":e,"page.end":r};return{hydrate:function(e){var r=transform(e,t);return r.page&&(r.page.start&&(r.page.start=parseInt(r.page.start,10)),r.page.end&&(r.page.end=parseInt(r.page.end,10))),r},serialize:function(e){return transform(e,n)}}},ignore:function(e){return{hydrate:function(r){var t=canReflect.serialize(r);return delete t.filter[e],t}}},sort:function(e,r){if(e||(e="sort"),r)throw new Error("can-query-logic/compat.sort - sortFunc is not supported");return{hydrate:function(r){var t=canReflect.serialize(r),n=get(t,"filter."+e);return void 0!==n&&(deleteKey(t,"filter."+e),t.sort=convertToJSONAPISort(n)),t},serialize:function(r){var t=canReflect.serialize(r),n=t.sort;return void 0!==n&&(delete t.sort,t[e]=convertToLegacySort(n)),t}}}}};function makeAlgebra(e){return e?e instanceof QueryLogic?e:new set.Algebra(e):defaultAlgebra}function makeFromTwoQueries(e){set[e]=function(r,t,n){return makeAlgebra(n)[e](r,t)}}makeFromTwoQueries("difference"),makeFromTwoQueries("union"),makeFromTwoQueries("intersection"),makeFromTwoQueries("isSubset"),makeFromTwoQueries("isEqual"),makeFromTwoQueries("isProperSubset"),set.count=function(e,r){return makeAlgebra(r).count(e)},set.comparators=set.props,defaultAlgebra=new set.Algebra;var canSetLegacy=set;export default canSetLegacy;
//# sourceMappingURL=can-set-legacy.js.map
