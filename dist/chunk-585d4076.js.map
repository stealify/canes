{"version":3,"file":"chunk-585d4076.js","sources":["../node_modules/can-log/can-log.js","../node_modules/can-log/dev/dev.js"],"sourcesContent":["'use strict';\n\nexports.warnTimeout = 5000;\nexports.logLevel = 0;\n\n/**\n * @module {{}} can-log log\n * @parent can-js-utilities\n * @collection can-infrastructure\n * @hide\n *\n * Utilities for logging to the console.\n */\n\n/**\n * @function can-log.warn warn\n * @parent can-log\n * @description\n *\n * Adds a warning message to the console.\n *\n * ```\n * var canLog = require(\"can-log\");\n *\n * canLog.warn(\"something evil\");\n * ```\n *\n * @signature `canLog.warn(msg)`\n * @param {String} msg the message to be logged.\n */\nexports.warn = function() {\n\tvar ll = this.logLevel;\n\tif (ll < 2) {\n\t\tif (typeof console !== \"undefined\" && console.warn) {\n\t\t\tthis._logger(\"warn\", Array.prototype.slice.call(arguments));\n\t\t} else if (typeof console !== \"undefined\" && console.log) {\n\t\t\tthis._logger(\"log\", Array.prototype.slice.call(arguments));\n\t\t}\n\t}\n};\n\n/**\n * @function can-log.log log\n * @parent can-log\n * @description\n * Adds a message to the console.\n * @hide\n *\n * ```\n * var canLog = require(\"can-log\");\n *\n * canLog.log(\"hi\");\n * ```\n *\n * @signature `canLog.log(msg)`\n * @param {String} msg the message\n */\nexports.log = function() {\n\tvar ll = this.logLevel;\n\tif (ll < 1) {\n\t\tif (typeof console !== \"undefined\" && console.log) {\n\t\t\tthis._logger(\"log\", Array.prototype.slice.call(arguments));\n\t\t}\n\t}\n};\n\n/**\n * @function can-log.error error\n * @parent can-log\n * @description\n * Adds an error message to the console.\n * @hide\n *\n * ```\n * var canLog = require(\"can-log\");\n *\n * canLog.error(new Error(\"Oh no!\"));\n * ```\n *\n * @signature `canLog.error(err)`\n * @param {String|Error} err The error to be logged.\n */\nexports.error = function() {\n\tvar ll = this.logLevel;\n\tif (ll < 1) {\n\t\tif (typeof console !== \"undefined\" && console.error) {\n\t\t\tthis._logger(\"error\", Array.prototype.slice.call(arguments));\n\t\t}\n\t}\n};\n\nexports._logger = function (type, arr) {\n\ttry {\n\t\tconsole[type].apply(console, arr);\n\t} catch(e) {\n\t\tconsole[type](arr);\n\t}\n};\n","'use strict';\n\nvar canLog = require(\"../can-log\");\n\n/**\n * @module {{}} can-log/dev dev\n * @parent can-log\n * @hide\n * \n * Utilities for logging development-mode messages. Use this module for\n * anything that should be shown to the user during development but isn't\n * needed in production. In production these functions become noops.\n */\nmodule.exports = {\n\twarnTimeout: 5000,\n\tlogLevel: 0,\n\t/**\n\t * @function can-log/dev.stringify stringify\n\t * @parent can-log\n\t * @description\n\t * @hide\n\t *\n\t * JSON stringifies a value, but unlike JSON, will output properties with\n\t * a value of `undefined` (e.g. `{ \"prop\": undefined }`, not `{}`).\n\t *\n\t * ```\n\t * var dev = require('can-log/dev');\n\t * var query = { where: undefined };\n\t * \n\t * dev.warn('No records found: ' + dev.stringify(query));\n\t * ```\n\t *\n\t * @signature `dev.stringify(value)`\n\t * @param {Any} value A value to stringify.\n\t * @return {String} A stringified representation of the passed in value.\n\t */\n\tstringify: function(value) {\n\t\tvar flagUndefined = function flagUndefined(key, value) {\n\t\t\treturn value === undefined ?\n\t\t\t\t \"/* void(undefined) */\" : value;\n\t\t};\n\t\t\n\t\treturn JSON.stringify(value, flagUndefined, \"  \").replace(\n\t\t\t/\"\\/\\* void\\(undefined\\) \\*\\/\"/g, \"undefined\");\n\t},\n\t/**\n\t * @function can-log/dev.warn warn\n\t * @parent can-log\n\t * @description\n\t * @hide\n\t *\n\t * Adds a warning message to the console.\n\t *\n\t * ```\n\t * var dev = require('can-log/dev');\n\t * \n\t * dev.warn(\"something evil\");\n\t * ```\n\t *\n\t * @signature `dev.warn(msg)`\n\t * @param {String} msg The warning message.\n\t */\n\twarn: function() {\n\t\t//!steal-remove-start\n\t\tcanLog.warn.apply(this, arguments);\n\t\t//!steal-remove-end\n\t},\n\t/**\n\t * @function can-log/dev.log log\n\t * @parent can-log\n\t * @description\n\t * @hide\n\t *\n\t * Adds a message to the console.\n\t *\n\t * ```\n\t * var dev = require('can-log/dev');\n\t * \n\t * dev.log(\"hi\");\n\t * ```\n\t *\n\t * @signature `dev.log(msg)`\n\t * @param {String} msg The message.\n\t */\n\tlog: function() {\n\t\t//!steal-remove-start\n\t\tcanLog.log.apply(this, arguments);\n\t\t//!steal-remove-end\n\t},\n\t/**\n\t * @function can-log/dev.error error\n\t * @parent can-log\n\t * @description\n\t * @hide\n\t *\n\t * Adds an error message to the console.\n\t *\n\t * ```\n\t * var dev = require(\"can-log/dev\");\n\t * \n\t * dev.error(new Error(\"Oh no!\"));\n\t * ```\n\t *\n\t * @signature `dev.error(err)`\n\t * @param {String|Error} err The error to be logged.\n\t */\n\terror: function() {\n\t\t//!steal-remove-start\n\t\tcanLog.error.apply(this, arguments);\n\t\t//!steal-remove-end\n\t},\n\t_logger: canLog._logger\n};\n"],"names":["this","logLevel","console","warn","_logger","Array","prototype","slice","call","arguments","log","error","type","arr","apply","e","warnTimeout","stringify","value","JSON","key","undefined","replace","canLog"],"mappings":"AAEA,gBAAsB,aACH,OA2BJ,WACLA,KAAKC,SACL,IACe,oBAAZC,SAA2BA,QAAQC,KAC7CH,KAAKI,QAAQ,OAAQC,MAAMC,UAAUC,MAAMC,KAAKC,YACnB,oBAAZP,SAA2BA,QAAQQ,KACpDV,KAAKI,QAAQ,MAAOC,MAAMC,UAAUC,MAAMC,KAAKC,kBAqBpC,WACJT,KAAKC,SACL,GACe,oBAAZC,SAA2BA,QAAQQ,KAC7CV,KAAKI,QAAQ,MAAOC,MAAMC,UAAUC,MAAMC,KAAKC,mBAqBlC,WACNT,KAAKC,SACL,GACe,oBAAZC,SAA2BA,QAAQS,OAC7CX,KAAKI,QAAQ,QAASC,MAAMC,UAAUC,MAAMC,KAAKC,qBAKlC,SAAUG,EAAMC,GACjC,IACCX,QAAQU,GAAME,MAAMZ,QAASW,GAC5B,MAAME,GACPb,QAAQU,GAAMC,0GClFC,CAChBG,YAAa,IACbf,SAAU,EAqBVgB,UAAW,SAASC,GAMnB,OAAOC,KAAKF,UAAUC,EALF,SAAuBE,EAAKF,GAC/C,YAAiBG,IAAVH,EACL,wBAA0BA,GAGe,MAAMI,QACjD,iCAAkC,cAmBpCnB,KAAM,WAELoB,OAAOpB,KAAKW,MAAMd,KAAMS,YAoBzBC,IAAK,WAEJa,OAAOb,IAAII,MAAMd,KAAMS,YAoBxBE,MAAO,WAENY,OAAOZ,MAAMG,MAAMd,KAAMS,YAG1BL,QAASmB,OAAOnB"}