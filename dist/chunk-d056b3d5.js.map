{"version":3,"file":"chunk-d056b3d5.js","sources":["../node_modules/can-dom-mutate/node.js"],"sourcesContent":["'use strict';\n\nvar globals = require('can-globals');\nvar namespace = require('can-namespace');\nvar domMutate = require('./can-dom-mutate');\nvar util = require('./-util');\n\nvar isInDocument = util.isInDocument;\nvar getParents = util.getParents;\n\nvar synthetic = {\n\tdispatchNodeInsertion: function (container, node) {\n\t\tif (isInDocument(node)) {\n\t\t\tdomMutate.dispatchNodeInsertion(node);\n\t\t}\n\t},\n\tdispatchNodeRemoval: function (container, node) {\n\t\tif (isInDocument(container) && !isInDocument(node)) {\n\t\t\tdomMutate.dispatchNodeRemoval(node);\n\t\t}\n\t}\n};\n\nvar compat = {\n\treplaceChild: function (newChild, oldChild) {\n\t\tvar newChildren = getParents(newChild);\n\t\tvar result = this.replaceChild(newChild, oldChild);\n\t\tsynthetic.dispatchNodeRemoval(this, oldChild);\n\t\tfor (var i = 0; i < newChildren.length; i++) {\n\t\t\tsynthetic.dispatchNodeInsertion(this, newChildren[i]);\n\t\t}\n\t\treturn result;\n\t},\n\tsetAttribute: function (name, value) {\n\t\tvar oldAttributeValue = this.getAttribute(name);\n\t\tvar result = this.setAttribute(name, value);\n\t\tvar newAttributeValue = this.getAttribute(name);\n\t\tif (oldAttributeValue !== newAttributeValue) {\n\t\t\tdomMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);\n\t\t}\n\t\treturn result;\n\t},\n\tremoveAttribute: function (name) {\n\t\tvar oldAttributeValue = this.getAttribute(name);\n\t\tvar result = this.removeAttribute(name);\n\t\tif (oldAttributeValue) {\n\t\t\tdomMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);\n\t\t}\n\t\treturn result;\n\t}\n};\n\nvar compatData = [\n\t['appendChild', 'Insertion'],\n\t['insertBefore', 'Insertion'],\n\t['removeChild', 'Removal']\n];\ncompatData.forEach(function (pair) {\n\tvar nodeMethod = pair[0];\n\tvar dispatchMethod = 'dispatchNode' + pair[1];\n\tcompat[nodeMethod] = function (node) {\n\t\tvar nodes = getParents(node);\n\t\tvar result = this[nodeMethod].apply(this, arguments);\n\t\tfor (var i = 0; i < nodes.length; i++) {\n\t\t\tsynthetic[dispatchMethod](this, nodes[i]);\n\t\t}\n\t\treturn result;\n\t};\n});\n\nvar normal = {};\nvar nodeMethods = ['appendChild', 'insertBefore', 'removeChild', 'replaceChild', 'setAttribute', 'removeAttribute'];\nnodeMethods.forEach(function (methodName) {\n\tnormal[methodName] = function () {\n\t\treturn this[methodName].apply(this, arguments);\n\t};\n});\n\n/**\n* @module {{}} can-dom-mutate/node node\n* @parent can-dom-mutate/modules\n*\n* Append, insert, and remove DOM nodes. Also, change node attributes.\n* This allows mutations to be dispatched in environments where MutationObserver is not supported.\n* @signature `mutateNode`\n*\n* Exports an `Object` with methods that shouhld be used to mutate HTML.\n* \n* ```js\n* var mutateNode = require('can-dom-mutate/node');\n* var el = document.createElement('div');\n*\n* mutateNode.appendChild.call(document.body, el);\n*\n* ```\n*/\nvar mutate = {};\n\n/**\n* @function can-dom-mutate/node.appendChild appendChild\n* @parent can-dom-mutate/node\n*\n* Append a node to an element, effectively `Node.prototype.appendChild`.\n*\n* @signature `mutate.appendChild.call(parent, child)`\n*\n* @param {Node} parent The parent into which the child is inserted.\n* @param {Node} child The child which will be inserted into the parent.\n* @return {Node} The appended child.\n*/\n\n/**\n* @function can-dom-mutate/node.insertBefore insertBefore\n* @parent can-dom-mutate/node\n*\n* Insert a node before a given reference node in an element, effectively `Node.prototype.insertBefore`.\n*\n* @signature `mutate.insertBefore.call(parent, child, reference)`\n* @param {Node} parent The parent into which the child is inserted.\n* @param {Node} child The child which will be inserted into the parent.\n* @param {Node} reference The reference which the child will be placed before.\n* @return {Node} The inserted child.\n*/\n\n/**\n* @function can-dom-mutate/node.removeChild removeChild\n* @parent can-dom-mutate/node\n*\n* Remove a node from an element, effectively `Node.prototype.removeChild`.\n*\n* @signature `mutate.removeChild.call(parent, child)`\n*\n* @param {Node} parent The parent from which the child is removed.\n* @param {Node} child The child which will be removed from the parent.\n* @return {Node} The removed child.\n*/\n\n/**\n* @function can-dom-mutate/node.replaceChild replaceChild\n* @parent can-dom-mutate/node\n*\n* Insert a node before a given reference node in an element, effectively `Node.prototype.replaceChild`.\n*\n* @signature `mutate.replaceChild.call(parent, newChild, oldChild)`\n*\n* @param {Node} parent The parent into which the newChild is inserted.\n* @param {Node} newChild The child which is inserted into the parent.\n* @param {Node} oldChild The child which is removed from the parent.\n* @return {Node} The replaced child.\n*/\n\n/**\n* @function can-dom-mutate/node.setAttribute setAttribute\n* @parent can-dom-mutate/node\n*\n* Set an attribute value on an element, effectively `Element.prototype.setAttribute`.\n*\n* @signature `mutate.setAttribute.call(element, name, value)`\n*\n* @param {Element} element The element on which to set the attribute.\n* @param {String} name The name of the attribute to set.\n* @param {String} value The value to set on the attribute.\n*/\n\n/**\n* @function can-dom-mutate/node.removeAttribute removeAttribute\n* @parent can-dom-mutate/node\n*\n* Removes an attribute from an element, effectively `Element.prototype.removeAttribute`.\n*\n* @signature `mutate.removeAttribute.call(element, name, value)`\n*\n* @param {Element} element The element from which to remove the attribute.\n* @param {String} name The name of the attribute to remove.\n*/\n\nfunction setMutateStrategy(observer) {\n\tvar strategy = observer ? normal : compat;\n\tfor (var key in strategy) {\n\t\tmutate[key] = strategy[key];\n\t}\n}\n\nvar mutationObserverKey = 'MutationObserver';\nsetMutateStrategy(globals.getKeyValue(mutationObserverKey));\nglobals.onKeyValue(mutationObserverKey, setMutateStrategy);\n\nmodule.exports = namespace.domMutateNode = mutate;\n"],"names":["isInDocument","util","getParents","synthetic","dispatchNodeInsertion","container","node","domMutate","dispatchNodeRemoval","compat","replaceChild","newChild","oldChild","newChildren","result","this","i","length","setAttribute","name","value","oldAttributeValue","getAttribute","dispatchNodeAttributeChange","removeAttribute","compatData","forEach","pair","nodeMethod","dispatchMethod","nodes","apply","arguments","normal","nodeMethods","methodName","mutate","setMutateStrategy","observer","strategy","key","mutationObserverKey","globals","getKeyValue","onKeyValue","namespace","domMutateNode"],"mappings":"gNAOA,IAAIA,aAAeC,KAAKD,aACpBE,WAAaD,KAAKC,WAElBC,UAAY,CACfC,sBAAuB,SAAUC,EAAWC,GACvCN,aAAaM,IAChBC,UAAUH,sBAAsBE,IAGlCE,oBAAqB,SAAUH,EAAWC,GACrCN,aAAaK,KAAeL,aAAaM,IAC5CC,UAAUC,oBAAoBF,KAK7BG,OAAS,CACZC,aAAc,SAAUC,EAAUC,GACjC,IAAIC,EAAcX,WAAWS,GACzBG,EAASC,KAAKL,aAAaC,EAAUC,GACzCT,UAAUK,oBAAoBO,KAAMH,GACpC,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IACvCb,UAAUC,sBAAsBW,KAAMF,EAAYG,IAEnD,OAAOF,GAERI,aAAc,SAAUC,EAAMC,GAC7B,IAAIC,EAAoBN,KAAKO,aAAaH,GACtCL,EAASC,KAAKG,aAAaC,EAAMC,GAKrC,OAHIC,IADoBN,KAAKO,aAAaH,IAEzCZ,UAAUgB,4BAA4BR,KAAMI,EAAME,GAE5CP,GAERU,gBAAiB,SAAUL,GAC1B,IAAIE,EAAoBN,KAAKO,aAAaH,GACtCL,EAASC,KAAKS,gBAAgBL,GAIlC,OAHIE,GACHd,UAAUgB,4BAA4BR,KAAMI,EAAME,GAE5CP,IAILW,WAAa,CAChB,CAAC,cAAe,aAChB,CAAC,eAAgB,aACjB,CAAC,cAAe,YAEjBA,WAAWC,QAAQ,SAAUC,GAC5B,IAAIC,EAAaD,EAAK,GAClBE,EAAiB,eAAiBF,EAAK,GAC3ClB,OAAOmB,GAAc,SAAUtB,GAG9B,IAFA,IAAIwB,EAAQ5B,WAAWI,GACnBQ,EAASC,KAAKa,GAAYG,MAAMhB,KAAMiB,WACjChB,EAAI,EAAGA,EAAIc,EAAMb,OAAQD,IACjCb,UAAU0B,GAAgBd,KAAMe,EAAMd,IAEvC,OAAOF,KAIT,IAAImB,OAAS,GACTC,YAAc,CAAC,cAAe,eAAgB,cAAe,eAAgB,eAAgB,mBACjGA,YAAYR,QAAQ,SAAUS,GAC7BF,OAAOE,GAAc,WACpB,OAAOpB,KAAKoB,GAAYJ,MAAMhB,KAAMiB,cAsBtC,IAAII,OAAS,GAgFb,SAASC,kBAAkBC,GAC1B,IAAIC,EAAWD,EAAWL,OAASxB,OACnC,IAAK,IAAI+B,KAAOD,EACfH,OAAOI,GAAOD,EAASC,GAIzB,IAAIC,oBAAsB,mBAC1BJ,kBAAkBK,QAAQC,YAAYF,sBACtCC,QAAQE,WAAWH,oBAAqBJ,mBAExC,SAAiBQ,UAAUC,cAAgBV"}